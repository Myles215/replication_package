"Project","MethodIndex","Method","Count","Tests"
"opennlp","1","opennlp.tools.ml.maxent.GISModel.eval(int[],float[],double[],EvalParameters)","1351","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","2","opennlp.tools.util.StringUtil.toLowerCase(CharSequence)","981","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","3","opennlp.tools.ml.perceptron.PerceptronModel.eval(int[],float[],double[],EvalParameters,boolean)","329","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","4","opennlp.tools.ml.model.Event.toString()","322","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","5","opennlp.tools.ml.model.HashSumEventStream.read()","247","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","6","opennlp.tools.ngram.NGramCharModel.add(CharSequence,int,int)","148","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","7","opennlp.tools.ngram.NGramModel.add(StringList,int,int)","116","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","8","opennlp.tools.ml.perceptron.PerceptronTrainer.findParameters(int,boolean)","101","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","9","opennlp.tools.ml.model.AbstractDataIndexer.update(String[],Map<String,Integer>)","54","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","10","opennlp.tools.ml.naivebayes.LogProbabilities.addIn(T,double,int)","54","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","11","opennlp.tools.ml.model.AbstractDataIndexer.index(ObjectStream<Event>,Map<String,Integer>)","47","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","12","opennlp.tools.ngram.NGramModel.setCount(StringList,int)","47","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","13","opennlp.tools.ngram.NGramCharModel.add(String)","43","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","14","opennlp.tools.ml.model.TwoPassDataIndexer.computeEventCounts(ObjectStream<Event>,DataOutputStream,Map<String,Integer>,int)","22","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3 [opennlp-tools]"
"opennlp","15","opennlp.tools.langdetect.DefaultLanguageDetectorContextGenerator.getContext(CharSequence)","21","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","16","opennlp.tools.util.XmlUtil.createDocumentBuilder()","17","opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithTokenClassFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithUnkownElement [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGeneratorChildren [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testInsertCachedFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGeneratorChild [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWihtSimpleDescriptor [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithCustomGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testParameters [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithTokenClassFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithUnkownElement [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWihtSimpleDescriptor [opennlp-tools]"
"opennlp","17","opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int,Object[],String[])","13","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","18","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(Function)","12","opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet [opennlp-tools]"
"opennlp","19","opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(String)","12","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","20","opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(String)","11","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","21","opennlp.tools.ml.maxent.GISTrainer.trainModel(int,DataIndexer,Prior,int)","10","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","22","opennlp.tools.util.StringList.toString()","8","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","23","opennlp.tools.util.PlainTextByLineStream.read()","8","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","24","opennlp.tools.parser.Parse.getType(String)","8","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","25","opennlp.tools.ngram.NGramModel.add(StringList)","7","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","26","opennlp.tools.util.Span.getCoveredText(CharSequence)","7","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","27","opennlp.tools.ml.model.AbstractModel.init(String[],Context[],String[])","7","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","28","opennlp.tools.chunker.DefaultChunkerContextGenerator.getContext(int,String[],String[],String[])","6","opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools]"
"opennlp","29","opennlp.tools.util.featuregen.TokenFeatureGenerator.createFeatures(List<String>,String[],int,String[])","6","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","30","opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(String[],Map<String,Object>)","6","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","31","opennlp.tools.ml.model.BinaryFileDataReader.readUTF()","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","32","opennlp.tools.parser.Parse.getCoveredText()","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","33","opennlp.tools.parser.Parse.getToken(String)","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","34","opennlp.tools.ngram.NGramCharModel.setCount(String,int)","5","opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","35","opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.serialize(OutputStream,Iterator<Entry>,boolean)","5","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary [opennlp-tools],opennlp.tools.dictionary.DictionaryTest.testSerialization [opennlp-tools],opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","36","opennlp.tools.util.normalizer.EmojiCharSequenceNormalizer.normalize(CharSequence)","5","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","37","opennlp.tools.ml.AbstractEventTrainer.getDataIndexer(ObjectStream<Event>)","4","opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1 [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3 [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2 [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5 [opennlp-tools]"
"opennlp","38","opennlp.tools.util.Version.currentVersion()","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools]"
"opennlp","39","opennlp.tools.ml.naivebayes.LogProbabilities.normalize()","4","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","40","opennlp.tools.util.normalizer.NumberCharSequenceNormalizer.normalize(CharSequence)","4","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","41","opennlp.tools.parser.AbstractContextGenerator.cons3(List<String>,Cons,Cons,Cons,Collection<Parse>,Collection<Parse>,boolean,boolean,boolean)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","42","opennlp.tools.ml.maxent.GISTrainer.nextIteration(double,CompletionService<ModelExpectationComputeTask>)","3","opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","43","opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int,DataIndexer)","3","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel [opennlp-tools]"
"opennlp","44","opennlp.tools.tokenize.DefaultTokenContextGenerator.createContext(String,int)","3","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools]"
"opennlp","45","opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(CharSequence)","3","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","46","opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(CharSequence)","3","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","47","opennlp.tools.ml.TrainerFactory.createBuiltinTrainer(Class<T>)","3","opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","48","opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","49","opennlp.tools.util.model.GenericModelSerializer.create(InputStream)","3","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","50","opennlp.tools.parser.AbstractContextGenerator.cons(Parse,int)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","51","opennlp.tools.ml.model.OnePassDataIndexer.computeEventCounts(ObjectStream<Event>,Map<String,Integer>,int)","3","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","52","opennlp.tools.util.featuregen.OutcomePriorFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","53","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(int[],float[],double[],EvalParameters,boolean)","3","opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","54","opennlp.morfologik.builder.MorfologikDictionayBuilder.build(Path,boolean,boolean,boolean,boolean,boolean)","3","opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testNoLemma [opennlp-morfologik-addon],opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeInsensitive [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionarySensitive [opennlp-morfologik-addon]"
"opennlp","55","opennlp.tools.doccat.DocumentCategorizerContextGenerator.getContext(String[],Map<String,Object>)","3","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","56","opennlp.tools.util.featuregen.TokenClassFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools]"
"opennlp","57","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainingStats(EvalParameters)","2","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools]"
"opennlp","58","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters()","2","opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools]"
"opennlp","59","opennlp.tools.langdetect.LanguageDetectorSampleStream.read()","2","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","60","opennlp.tools.langdetect.LanguageDetectorME.updateCounts(String[],Map<String,MutableInt>)","2","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","61","opennlp.tools.parser.AbstractContextGenerator.cons2(List<String>,Cons,Cons,Collection<Parse>,boolean)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","62","opennlp.tools.formats.nkjp.NKJPTextDocument.parse(InputStream)","2","opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testParsingSimpleDoc [opennlp-tools],opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testGetParagraphs [opennlp-tools]"
"opennlp","63","opennlp.tools.parser.AbstractContextGenerator.checkcons(Parse,Parse,String,List<String>)","2","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","64","opennlp.tools.namefind.DefaultNameContextGenerator.getContext(int,String[],String[],Object[])","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","65","opennlp.tools.tokenize.WhitespaceTokenizer.tokenizePos(String)","2","opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools]"
"opennlp","66","opennlp.tools.parser.treeinsert.CheckContextGenerator.getContext(Parse,Parse[],int,boolean)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","67","opennlp.tools.util.normalizer.AggregateCharSequenceNormalizer.normalize(CharSequence)","2","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","68","opennlp.tools.ml.model.TwoPassDataIndexer.index(ObjectStream<Event>)","2","opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline [opennlp-tools]"
"opennlp","69","opennlp.tools.util.featuregen.BigramNameFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","70","opennlp.tools.langdetect.LanguageDetectorME.train(ObjectStream<LanguageSample>,TrainingParameters,LanguageDetectorFactory)","2","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","71","opennlp.tools.parser.AbstractContextGenerator.consbo(Parse,int)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","72","opennlp.tools.ml.model.AbstractDataIndexer.toIndexedStringArray(Map<String,Integer>)","2","opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","73","opennlp.tools.lemmatizer.DefaultLemmatizerContextGenerator.getContext(int,String[],String[],String[])","2","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","74","opennlp.tools.util.model.PropertiesSerializer.serialize(Properties,OutputStream)","2","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","75","opennlp.tools.parser.Parse.parseParse(String,GapLabeler)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","76","opennlp.tools.parser.AbstractContextGenerator.surround(Parse,int,String,Collection<Parse>,List<String>)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","77","opennlp.tools.util.featuregen.CachedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","78","opennlp.tools.ml.maxent.io.GISModelWriter.persist()","2","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","79","opennlp.tools.ml.maxent.GISTrainer.findParameters(int,double)","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools]"
"opennlp","80","opennlp.tools.formats.ad.ADNameSampleStream.processLeaf(Leaf,List<String>,List<Span>)","1","opennlp.tools.formats.ad.ADNameSampleStreamTest.testCheckMergedContractions [opennlp-tools]"
"opennlp","81","opennlp.tools.postag.ConfigurablePOSContextGenerator.getContext(int,String[],String[],Object[])","1","opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools]"
"opennlp","82","opennlp.tools.lemmatizer.LemmatizerEvaluator.processSample(LemmaSample)","1","opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","83","opennlp.tools.util.PlainTextByLineStream.reset()","1","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools]"
"opennlp","84","opennlp.tools.chunker.ChunkerFactory.getContextGenerator()","1","opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools]"
"opennlp","85","opennlp.tools.doccat.DocumentSample.getText()","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","86","opennlp.tools.util.featuregen.AggregatedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","87","opennlp.tools.cmdline.TypedCmdLineTool.getBasicHelp(Class<?>...)","1","opennlp.tools.cmdline.CLITest.testToolParameterMessage [opennlp-tools]"
"opennlp","88","opennlp.tools.parser.ChunkContextGenerator.chunkandpostagbo(int,String,String)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","89","opennlp.tools.formats.ad.ADSentenceStream.read()","1","opennlp.tools.formats.ad.ADChunkSampleStreamTest.testChunks [opennlp-tools]"
"opennlp","90","opennlp.tools.ml.perceptron.PerceptronTrainer.trainingStats(EvalParameters)","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools]"
"opennlp","91","opennlp.tools.parser.ChunkSampleStream.read()","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","92","opennlp.tools.parser.ChunkContextGenerator.getContext(int,String[],String[],String[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","93","opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(String[],Map<String,Object>)","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","94","opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(Class<T>,String)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory [opennlp-tools]"
"opennlp","95","opennlp.tools.cmdline.ArgumentParser.createUsage(Class<?>...)","1","opennlp.tools.cmdline.CLITest.testHelpMessageOfTools [opennlp-tools]"
"opennlp","96","opennlp.tools.util.featuregen.StringPattern.recognize(String)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","97","opennlp.tools.util.featuregen.PrefixFeatureGenerator.getPrefixes(String)","1","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","98","opennlp.tools.doccat.DocumentCategorizerME.train(String,ObjectStream<DocumentSample>,TrainingParameters,DoccatFactory)","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","99","opennlp.tools.ml.BeamSearch.bestSequences(int,T[],Object[],double,BeamSearchContextGenerator<T>,SequenceValidator<T>)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","100","opennlp.tools.tokenize.DefaultTokenContextGenerator.addCharPreds(String,char,List<String>)","1","opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","101","opennlp.tools.formats.nkjp.NKJPSegmentationDocument.parse(InputStream)","1","opennlp.tools.formats.nkjp.NKJPSegmentationDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","102","opennlp.tools.util.model.BaseModel.loadModel(InputStream)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","103","opennlp.tools.tokenize.DetokenizationDictionary.init(InputStream)","1","opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools]"
"opennlp","104","opennlp.tools.chunker.ChunkSampleStream.read()","1","opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","105","opennlp.tools.util.model.ModelUtil.writeModel(MaxentModel,OutputStream)","1","opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","106","opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(String)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","107","opennlp.tools.langdetect.LanguageDetectorFactory.getContextGenerator()","1","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools]"
"opennlp","108","opennlp.tools.parser.Parse.pruneParse(Parse)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","109","opennlp.tools.parser.Parse.clone()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","110","opennlp.tools.formats.ad.ADNameSampleStream.getNER(String)","1","opennlp.tools.formats.ad.ADNameSampleStreamTest.testSimpleCount [opennlp-tools]"
"opennlp","111","opennlp.tools.parser.ChunkContextGenerator.chunkandpostag(int,String,String,String)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","112","opennlp.tools.parser.treeinsert.Parser.getRightFrontier(Parse,Set<String>)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","113","opennlp.tools.postag.POSTaggerFactory.createFeatureGenerators()","1","opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","114","opennlp.tools.parser.treeinsert.AttachContextGenerator.getContext(Parse[],int,List<Parse>,int)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","115","opennlp.tools.formats.Conll02NameSampleStreamFactory.registerFactory()","1","opennlp.tools.cmdline.CLITest.testMainHelpMessage [opennlp-tools]"
"opennlp","116","opennlp.tools.ml.maxent.io.GISModelWriter.compressOutcomes(ComparablePredicate[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","117","opennlp.tools.ml.model.AbstractDataIndexer.display(String)","1","opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory [opennlp-tools]"
"opennlp","118","opennlp.tools.util.featuregen.GeneratorFactory.createDOM(InputStream)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","119","opennlp.tools.ml.maxent.io.GISModelWriter.sortValues()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","120","opennlp.tools.ml.model.AbstractModelReader.getParameters(int[][])","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","121","opennlp.tools.parser.chunking.CheckContextGenerator.getContext(Parse[],String,int,int)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","122","opennlp.tools.parser.Parse.insert(Parse)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","123","opennlp.tools.ml.model.Context.hashCode()","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","124","opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
