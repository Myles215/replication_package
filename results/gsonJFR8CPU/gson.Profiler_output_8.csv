"Project","MethodIndex","Method","Count","Tests"
"gson","1","com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(Class<T1>,TypeAdapter<T1>)","8","com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields [gson],com.google.gson.functional.FieldNamingTest.testIdentity [gson],com.google.gson.functional.JsonParserTest.testExtraCommasInArrays [gson],com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields [gson],com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter [gson],com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization [gson],com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray [gson],com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization [gson]"
"gson","2","com.google.gson.GsonBuilder.create()","4","com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration [gson],com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField [gson],com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject [gson],com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId [gson]"
"gson","3","com.google.gson.internal.bind.TypeAdapters.newFactoryForMultipleTypes(Class<TT>,Class<?extendsTT>,TypeAdapter<?superTT>)","3","com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization [gson],com.google.gson.functional.ObjectTest.testNestedSerialization [gson],com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter [gson]"
"gson","4","com.google.gson.reflect.TypeToken.getSuperclassTypeParameter(Class<?>)","3","com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId [gson],com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray [gson],com.google.gson.functional.RawSerializationTest.testParameterizedObject [gson]"
"gson","5","com.google.gson.Gson.atomicLongArrayAdapter(TypeAdapter<Number>)","3","com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField [gson],com.google.gson.functional.DefaultTypeAdaptersTest.testJsonElementTypeMismatch [gson],com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral [gson]"
"gson","6","com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(Class<?superT>)","3","com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization [gson],com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize2dArray [gson],com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization [gson]"
"gson","7","com.google.gson.internal.Excluder.isAnonymousOrLocal(Class<?>)","3","com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization [gson],com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation [gson],com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects [gson]"
"gson","8","com.google.gson.Gson.getAdapter(TypeToken<T>)","2","com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap [gson],com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization [gson]"
"gson","9","com.google.gson.internal.bind.TypeAdapters.newFactory(Class<TT>,Class<TT>,TypeAdapter<?superTT>)","2","com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization [gson],com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization [gson]"
"gson","10","com.google.gson.internal.Streams.write(JsonElement,JsonWriter)","2","com.google.gson.functional.JsonArrayTest.testSameAddition [gson],com.google.gson.functional.JsonArrayTest.testMixedPrimitiveAddition [gson]"
"gson","11","com.google.gson.internal.bind.TypeAdapters.newFactory(Class<TT>,TypeAdapter<TT>)","2","com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization [gson],com.google.gson.functional.ArrayTest.testArrayOfNullSerialization [gson]"
"gson","12","com.google.gson.DefaultDateTypeAdapter.deserializeToDate(String)","2","com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale [gson],com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale [gson]"
"gson","13","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(Field)","2","com.google.gson.functional.SerializedNameTest.testMultipleNamesDeserializedCorrectly [gson],com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree [gson]"
"gson","14","com.google.gson.internal.bind.util.ISO8601Utils.parse(String,ParsePosition)","1","com.google.gson.DefaultDateTypeAdapterTest.testDateDeserializationISO8601 [gson]"
"gson","15","com.google.gson.internal.Streams.parse(JsonReader)","1","com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers [gson]"
"gson","16","com.google.gson.stream.JsonReader.peek()","1","com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization [gson]"
"gson","17","com.google.gson.internal.LinkedHashTreeMap.findByObject(Object)","1","com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash [gson]"
"gson","18","com.google.gson.reflect.TypeToken.hashCode()","1","com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization [gson]"
"gson","19","com.google.gson.stream.JsonWriter.beforeValue()","1","com.google.gson.functional.CircularReferenceTest.testCircularSerialization [gson]"
"gson","20","com.google.gson.internal.Excluder.create(Gson,TypeToken<T>)","1","com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject [gson]"
"gson","21","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(JsonWriter,T)","1","com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization [gson]"
"gson","22","com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.create(Gson,TypeToken<T>)","1","com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization [gson]"
"gson","23","com.google.gson.internal.Excluder.excludeClassChecks(Class<?>)","1","com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization [gson]"
"gson","24","com.google.gson.stream.JsonReader.nextLong()","1","com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong [gson]"
"gson","25","com.google.gson.internal.LinkedTreeMap.entrySet()","1","com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree [gson]"
"gson","26","com.google.gson.JsonParser.parse(JsonReader)","1","com.google.gson.JsonParserTest.testParseString [gson]"
"gson","27","com.google.gson.internal.Excluder.excludeField(Field,boolean)","1","com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization [gson]"
"gson","28","com.google.gson.Gson.atomicLongAdapter(TypeAdapter<Number>)","1","com.google.gson.functional.EnumTest.testEnumCaseMapping [gson]"
