"Project","MethodIndex","Method","Count","Tests"
"gson","1","com.google.gson.internal.bind.TypeAdapters.newFactoryForMultipleTypes(Class<TT>,Class<?extendsTT>,TypeAdapter<?superTT>)","4","com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive [gson],com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion [gson],com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization [gson],com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterWrappedInNullSafeAsRequested [gson]"
"gson","2","com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(Class<T1>,TypeAdapter<T1>)","4","com.google.gson.JsonParserTest.testReadWriteTwoObjects [gson],com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree [gson],com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject [gson],com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization [gson]"
"gson","3","com.google.gson.internal.Streams.parse(JsonReader)","3","com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails [gson],com.google.gson.JsonParserTest.testParseEmptyString [gson],com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities [gson]"
"gson","4","com.google.gson.internal.Excluder.isAnonymousOrLocal(Class<?>)","3","com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject [gson],com.google.gson.functional.MapTest.testInterfaceTypeMap [gson],com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization [gson]"
"gson","5","com.google.gson.internal.bind.TypeAdapters.newFactory(Class<TT>,Class<TT>,TypeAdapter<?superTT>)","2","com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization [gson],com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization [gson]"
"gson","6","com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.create(Gson,TypeToken<T>)","2","com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked [gson],com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault [gson]"
"gson","7","com.google.gson.internal.Excluder.excludeClassChecks(Class<?>)","2","com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion [gson],com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization [gson]"
"gson","8","com.google.gson.GsonBuilder.registerTypeAdapter(Type,Object)","2","com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter [gson],com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming [gson]"
"gson","9","com.google.gson.internal.bind.TypeAdapters.newFactory(Class<TT>,TypeAdapter<TT>)","2","com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization [gson],com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization [gson]"
"gson","10","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(Field)","2","com.google.gson.internal.bind.RecursiveTypesResolveTest.testIssue440WeakReference [gson],com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization [gson]"
"gson","11","com.google.gson.Gson.toJson(Object,Type,Appendable)","1","com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays [gson]"
"gson","12","com.google.gson.stream.JsonReader.peek()","1","com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause [gson]"
"gson","13","com.google.gson.Gson.getAdapter(TypeToken<T>)","1","com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter [gson]"
"gson","14","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Gson,TypeToken<?>,Class<?>)","1","com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers [gson]"
"gson","15","com.google.gson.DefaultDateTypeAdapter.write(JsonWriter,Date)","1","com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs [gson]"
"gson","16","com.google.gson.stream.JsonWriter.beforeValue()","1","com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace [gson]"
"gson","17","com.google.gson.reflect.TypeToken.equals(Object)","1","com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization [gson]"
"gson","18","com.google.gson.Gson.fromJson(JsonElement,Type)","1","com.google.gson.functional.JsonParserTest.testDeserializingCustomTree [gson]"
"gson","19","com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor(Type,Class<?superT>)","1","com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap [gson]"
"gson","20","com.google.gson.Gson.newJsonReader(Reader)","1","com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization [gson]"
"gson","21","com.google.gson.Gson.atomicLongArrayAdapter(TypeAdapter<Number>)","1","com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys [gson]"
"gson","22","com.google.gson.internal.Primitives.add(Map<Class<?>,Class<?>>,Map<Class<?>,Class<?>>,Class<?>,Class<?>)","1","com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization [gson]"
"gson","23","com.google.gson.internal.Streams.write(JsonElement,JsonWriter)","1","com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue [gson]"
"gson","24","com.google.gson.JsonStreamParser.next()","1","com.google.gson.JsonStreamParserTest.testParseTwoStrings [gson]"
"gson","25","com.google.gson.internal.UnsafeAllocator.create()","1","com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize [gson]"
"gson","26","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(Field,boolean)","1","com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter [gson]"
"gson","27","com.google.gson.DefaultDateTypeAdapter.deserializeToDate(String)","1","com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale [gson]"
"gson","28","com.google.gson.util.VersionUtils.determineMajorJavaVersion()","1","com.google.gson.internal.bind.RecursiveTypesResolveTest.testRecursiveTypeVariablesResolve12 [gson]"
"gson","29","com.google.gson.internal.Excluder.excludeField(Field,boolean)","1","com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization [gson]"
