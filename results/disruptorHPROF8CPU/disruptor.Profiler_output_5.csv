"Project","MethodIndex","Method","Count","Tests"
"disruptor","1","com.lmax.disruptor.dsl.ConsumerRepository.getLastSequenceInChain(boolean)","380","com.lmax.disruptor.dsl.DisruptorTest.shouldSetSequenceForHandlerIfAddedAfterPublish [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportUsingWorkerPoolAsDependencyAndProcessFirstEventAsSoonAsItIsAvailable [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportCustomProcessorsAsDependencies [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportSpecifyingADefaultExceptionHandlerForEventProcessors [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportSpecifyingAExceptionHandlerForEventProcessors [],com.lmax.disruptor.dsl.DisruptorTest.shouldProvideEventsMultipleWorkHandlers [],com.lmax.disruptor.dsl.DisruptorTest.shouldHonourDependenciesForCustomProcessors [],com.lmax.disruptor.dsl.DisruptorTest.shouldAllowEventHandlerWithSuperType [],com.lmax.disruptor.dsl.DisruptorTest.shouldSetSequenceForWorkProcessorIfAddedAfterPublish []"
"disruptor","2","com.lmax.disruptor.dsl.Disruptor.shutdown(long,TimeUnit)","202","com.lmax.disruptor.dsl.DisruptorTest.shouldSetSequenceForHandlerIfAddedAfterPublish [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportUsingWorkerPoolAsDependencyAndProcessFirstEventAsSoonAsItIsAvailable [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportCustomProcessorsAsDependencies [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportSpecifyingADefaultExceptionHandlerForEventProcessors [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportSpecifyingAExceptionHandlerForEventProcessors [],com.lmax.disruptor.dsl.DisruptorTest.shouldProvideEventsMultipleWorkHandlers [],com.lmax.disruptor.dsl.DisruptorTest.shouldHonourDependenciesForCustomProcessors [],com.lmax.disruptor.dsl.DisruptorTest.shouldAllowEventHandlerWithSuperType [],com.lmax.disruptor.dsl.DisruptorTest.shouldSetSequenceForWorkProcessorIfAddedAfterPublish []"
"disruptor","3","com.lmax.disruptor.dsl.Disruptor.hasBacklog()","105","com.lmax.disruptor.dsl.DisruptorTest.shouldSetSequenceForHandlerIfAddedAfterPublish [],com.lmax.disruptor.dsl.DisruptorTest.shouldSupportCustomProcessorsAsDependencies [],com.lmax.disruptor.dsl.DisruptorTest.shouldHonourDependenciesForCustomProcessors [],com.lmax.disruptor.dsl.DisruptorTest.shouldAllowEventHandlerWithSuperType []"
"disruptor","4","com.lmax.disruptor.WorkProcessor.run()","98","com.lmax.disruptor.WorkerPoolTest.shouldProcessOnlyOnceItHasBeenPublished []"
"disruptor","5","com.lmax.disruptor.MultiProducerSequencer.next(int)","6","com.lmax.disruptor.RingBufferTest.shouldNotTryPublishEventsVarArgWhenBatchStartsAtIsNegative [],com.lmax.disruptor.DisruptorStressTest.shouldHandleLotsOfThreads []"
"disruptor","6","com.lmax.disruptor.BusySpinWaitStrategy.waitFor(long,Sequence,Sequence,SequenceBarrier)","4","com.lmax.disruptor.BusySpinWaitStrategyTest.shouldWaitForValue []"
"disruptor","7","com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long)","3","com.lmax.disruptor.DisruptorStressTest.shouldHandleLotsOfThreads []"
"disruptor","8","com.lmax.disruptor.RingBuffer.next()","3","com.lmax.disruptor.DisruptorStressTest.shouldHandleLotsOfThreads []"
"disruptor","9","com.lmax.disruptor.MultiProducerSequencer.initialiseAvailableBuffer()","1","com.lmax.disruptor.DisruptorStressTest.shouldHandleLotsOfThreads []"
"disruptor","10","com.lmax.disruptor.dsl.EventProcessorInfo.isEndOfChain()","1","com.lmax.disruptor.dsl.DisruptorTest.shouldSetSequenceForHandlerIfAddedAfterPublish []"
"disruptor","11","com.lmax.disruptor.BlockingWaitStrategy.waitFor(long,Sequence,Sequence,SequenceBarrier)","1","com.lmax.disruptor.PhasedBackoffWaitStrategyTest.shouldHandleSequenceChangeWithTenMillisecondDelay []"
"disruptor","12","com.lmax.disruptor.MultiProducerSequencer.getHighestPublishedSequence(long,long)","1","com.lmax.disruptor.DisruptorStressTest.shouldHandleLotsOfThreads []"
"disruptor","13","com.lmax.disruptor.BatchEventProcessor.processEvents()","1","com.lmax.disruptor.DisruptorStressTest.shouldHandleLotsOfThreads []"
"disruptor","14","com.lmax.disruptor.RingBuffer.publish(long)","1","com.lmax.disruptor.DisruptorStressTest.shouldHandleLotsOfThreads []"
"disruptor","15","com.lmax.disruptor.RingBuffer.checkBatchSizing(int,int)","1","com.lmax.disruptor.RingBufferTest.shouldNotTryPublishEventsVarArgWhenBatchStartsAtIsNegative []"
"disruptor","16","com.lmax.disruptor.dsl.EventProcessorInfo.getSequences()","1","com.lmax.disruptor.dsl.DisruptorTest.shouldSetSequenceForWorkProcessorIfAddedAfterPublish []"
"disruptor","17","com.lmax.disruptor.BusySpinWaitStrategy.signalAllWhenBlocking()","1","com.lmax.disruptor.DisruptorStressTest.shouldHandleLotsOfThreads []"
"disruptor","18","com.lmax.disruptor.PhasedBackoffWaitStrategy.waitFor(long,Sequence,Sequence,SequenceBarrier)","1","com.lmax.disruptor.PhasedBackoffWaitStrategyTest.shouldHandleSequenceChangeWithTenMillisecondDelay []"
"disruptor","19","com.lmax.disruptor.AbstractSequencer.getCursor()","1","com.lmax.disruptor.ShutdownOnFatalExceptionTest.shouldShutdownGracefulEvenWithFatalExceptionHandler []"
