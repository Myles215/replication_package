"Project","MethodIndex","Method","Count","Tests"
"opennlp","1","opennlp.tools.ml.maxent.GISModel.eval(Context[],float[],double[],EvalParameters)","859","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","2","opennlp.tools.ml.perceptron.PerceptronTrainer.findParameters(int,boolean)","271","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","3","opennlp.tools.ml.model.TwoPassDataIndexer.computeEventCounts(ObjectStream<Event>,DataOutputStream,Map<String,Integer>,int)","269","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","4","opennlp.tools.util.StringUtil.toLowerCase(CharSequence)","213","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEqualsDifferentCase [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.dictionaryMatch [opennlp-tools],opennlp.tools.formats.ad.ADNameSampleStreamTest.testSimpleCount [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testBuildNGramDictionary [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools],opennlp.tools.ngram.NGramModelTest.testFromFile [opennlp-tools]"
"opennlp","5","opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int,Object[],String[])","206","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","6","opennlp.tools.ml.model.HashSumEventStream.read()","154","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","7","opennlp.tools.ml.maxent.GISModel.eval(int[],float[],double[],EvalParameters)","153","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","8","opennlp.tools.ml.model.AbstractDataIndexer.update(String[],Map<String,Integer>)","136","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","9","opennlp.tools.ml.maxent.GISTrainer.nextIteration(double,CompletionService<ModelExpectationComputeTask>)","119","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2 [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1 [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.ml.maxent.ScaleDoesntMatterTest.testScaleResults [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","10","opennlp.tools.ml.model.Event.toString()","114","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","11","opennlp.tools.ml.ArrayMath.logSumOfExps(double[])","110","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet [opennlp-tools]"
"opennlp","12","opennlp.tools.ml.model.AbstractDataIndexer.index(ObjectStream<Event>,Map<String,Integer>)","78","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndex [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1 [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testDomainDimensionSanity [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","13","opennlp.tools.ml.model.AbstractDataIndexer.toIndexedStringArray(Map<String,Integer>)","54","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndex [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.ml.model.OnePassDataIndexerTest.testIndex [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtInitialPoint [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","14","opennlp.tools.ml.ArrayMath.sumFeatures(Context[],float[],double[])","53","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","15","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[])","51","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","16","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[])","43","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","17","opennlp.tools.ml.perceptron.PerceptronModel.eval(int[],float[],double[],EvalParameters,boolean)","42","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","18","opennlp.tools.ngram.NGramCharModel.add(CharSequence,int,int)","37","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","19","opennlp.tools.ngram.NGramModel.add(StringList)","33","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","20","opennlp.tools.ml.model.AbstractDataIndexer.sortAndMerge(List<ComparableEvent>,boolean)","28","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools]"
"opennlp","21","opennlp.tools.ml.naivebayes.LogProbabilities.addIn(T,double,int)","26","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","22","opennlp.tools.ngram.NGramModel.setCount(StringList,int)","23","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","23","opennlp.tools.ngram.NGramCharModel.contains(String)","23","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","24","opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.serialize(OutputStream,Iterator<Entry>,boolean)","23","opennlp.tools.ngram.NGramModelTest.testSerialize [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.dictionary.DictionaryTest.testSerialization [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testSerialization [opennlp-tools]"
"opennlp","25","opennlp.tools.ngram.NGramCharModel.add(String)","22","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","26","opennlp.tools.ml.maxent.GISTrainer.trainModel(int,DataIndexer,Prior,int)","21","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","27","opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(CharSequence)","20","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","28","opennlp.tools.ngram.NGramCharModel.setCount(String,int)","19","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","29","opennlp.tools.util.PlainTextByLineStream.read()","19","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","30","opennlp.tools.ml.maxent.GISTrainer.display(String)","18","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","31","opennlp.tools.langdetect.DefaultLanguageDetectorContextGenerator.getContext(CharSequence)","18","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","32","opennlp.tools.ml.ArrayMath.innerProduct(double[],double[])","17","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","33","opennlp.tools.ml.maxent.quasinewton.LineSearch.doConstrainedLineSearch(Function,double[],LineSearchResult,double,double)","17","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","34","opennlp.tools.ml.model.AbstractModel.init(String[],Context[],String[])","16","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","35","opennlp.tools.ml.model.OnePassDataIndexer.computeEventCounts(ObjectStream<Event>,Map<String,Integer>,int)","16","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01 [opennlp-tools]"
"opennlp","36","opennlp.tools.ngram.NGramModel.getCount(StringList)","15","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","37","opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(CharSequence)","15","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","38","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(Context[],float[],double[],EvalParameters,boolean)","15","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","39","opennlp.tools.util.StringList.toString()","14","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","40","opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(List<String>,String[],int,String[])","13","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","41","opennlp.tools.ml.maxent.quasinewton.QNModel.eval(int[],float[],double[],int,int,double[])","13","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","42","opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(CharSequence)","12","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","43","opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(InputStream,EntryInserter)","11","opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testLoadingDictionaryWithoutCaseAttribute [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools],opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryWasLoaded [opennlp-uima],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory [opennlp-tools],opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString [opennlp-tools]"
"opennlp","44","opennlp.tools.util.featuregen.GeneratorFactory.createDOM(InputStream)","11","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","45","opennlp.tools.ml.maxent.GISModel.eval(int[],double[],EvalParameters)","10","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","46","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(int[],float[],double[],EvalParameters,boolean)","10","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","47","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computeDirection(double[])","10","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","48","opennlp.tools.ml.model.ComparableEvent.compareTo(ComparableEvent)","8","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools]"
"opennlp","49","opennlp.tools.ml.model.BinaryFileDataReader.readUTF()","8","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","50","opennlp.morfologik.builder.MorfologikDictionayBuilder.build(Path,boolean,boolean,boolean,boolean,boolean)","8","opennlp.morfologik.builder.POSDictionayBuilderTest.testBuildDictionary [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testNoLemma [opennlp-morfologik-addon],opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeInsensitive [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionaryInsensitive [opennlp-morfologik-addon],opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeMultiLemma [opennlp-morfologik-addon],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","51","opennlp.tools.parser.Parse.parseParse(String,GapLabeler)","8","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.parser.PosSampleStreamTest.testConvertParseToPosSample [opennlp-tools]"
"opennlp","52","opennlp.tools.util.PlainTextByLineStream.reset()","7","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.formats.EvalitaNameSampleStreamTest.testReset [opennlp-tools]"
"opennlp","53","opennlp.tools.util.Version.currentVersion()","7","opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","54","opennlp.tools.util.XmlUtil.createDocumentBuilder()","7","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools]"
"opennlp","55","opennlp.tools.util.normalizer.EmojiCharSequenceNormalizer.normalize(CharSequence)","7","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","56","opennlp.tools.ml.ArrayMath.argmax(double[])","7","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","57","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters()","6","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","58","opennlp.tools.parser.Parse.getToken(String)","6","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","59","opennlp.tools.dictionary.Dictionary.contains(StringList)","6","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","60","opennlp.tools.ngram.NGramModel.add(StringList,int,int)","6","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","61","opennlp.tools.util.StringUtil.isWhitespace(char)","6","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.namefind.NameSampleTypeFilterTest.testNoFilter [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testBuildNGramDictionary [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","62","opennlp.tools.ml.naivebayes.LogProbabilities.normalize()","6","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","63","opennlp.tools.ngram.NGramCharModel.getCount(String)","6","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","64","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computePseudoGrad(double[],double[],double[])","6","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","65","opennlp.tools.ml.BeamSearch.bestSequences(int,T[],Object[],double,BeamSearchContextGenerator<T>,SequenceValidator<T>)","5","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools]"
"opennlp","66","opennlp.tools.tokenize.WhitespaceTokenizer.tokenizePos(String)","5","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","67","opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(String)","5","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","68","opennlp.tools.tokenize.SimpleTokenizer.tokenizePos(String)","5","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.tokenize.SimpleTokenizerTest.testWordDotTokenization [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","69","opennlp.tools.ml.maxent.io.GISModelWriter.sortValues()","5","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","70","opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.computeInParallel(double[],Class<?extendsComputeTask>)","4","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","71","opennlp.tools.ml.maxent.GISModel.eval(String[],float[],double[])","4","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools]"
"opennlp","72","opennlp.tools.ml.TrainerFactory.createBuiltinTrainer(Class<T>)","4","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","73","opennlp.tools.ml.naivebayes.NaiveBayesModel.initOutcomeTotals(String[],Context[])","4","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","74","opennlp.tools.parser.AbstractContextGenerator.surround(Parse,int,String,Collection<Parse>,List<String>)","4","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","75","opennlp.tools.util.normalizer.NumberCharSequenceNormalizer.normalize(CharSequence)","4","opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","76","opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int,DataIndexer)","3","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","77","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainingStats(EvalParameters)","3","opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","78","opennlp.tools.ml.naivebayes.LogProbabilities.log(double)","3","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools]"
"opennlp","79","opennlp.tools.ml.perceptron.PerceptronModel.eval(Context[],float[],double[],EvalParameters,boolean)","3","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools]"
"opennlp","80","opennlp.tools.ml.perceptron.PerceptronTrainer.trainingStats(EvalParameters)","3","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools]"
"opennlp","81","opennlp.tools.parser.ChunkContextGenerator.getContext(int,String[],String[],String[])","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","82","opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(String[],Map<String,Object>)","3","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","83","opennlp.tools.ml.model.ComparablePredicate.compareTo(ComparablePredicate)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools]"
"opennlp","84","opennlp.tools.util.featuregen.StringPattern.recognize(String)","3","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testContainsDigit [opennlp-tools]"
"opennlp","85","opennlp.tools.util.normalizer.AggregateCharSequenceNormalizer.normalize(CharSequence)","3","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools]"
"opennlp","86","opennlp.tools.ml.model.TwoPassDataIndexer.index(ObjectStream<Event>)","3","opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools]"
"opennlp","87","opennlp.tools.parser.Parse.getType(String)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","88","opennlp.tools.parser.AbstractContextGenerator.cons3(List<String>,Cons,Cons,Cons,Collection<Parse>,Collection<Parse>,boolean,boolean,boolean)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","89","opennlp.tools.ml.perceptron.PerceptronModelWriter.sortValues()","2","opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","90","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(Function)","2","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","91","opennlp.tools.postag.ConfigurablePOSContextGenerator.getContext(int,String[],String[],Object[])","2","opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","92","opennlp.tools.ngram.NGramModel.contains(StringList)","2","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","93","opennlp.tools.parser.AbstractContextGenerator.cons2(List<String>,Cons,Cons,Collection<Parse>,boolean)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","94","opennlp.tools.formats.ad.ADSentenceStream.read()","2","opennlp.tools.formats.ad.ADPOSSampleStreamTest.testSimple [opennlp-tools],opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction [opennlp-tools]"
"opennlp","95","opennlp.tools.ml.model.MutableContext.updateParameter(int,double)","2","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools]"
"opennlp","96","opennlp.tools.ml.AbstractEventTrainer.train(ObjectStream<Event>)","2","opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","97","opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(Function,double[],LineSearchResult,double)","2","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","98","opennlp.tools.parser.chunking.BuildContextGenerator.getContext(Parse[],int)","2","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","99","opennlp.tools.ml.model.BinaryFileDataReader.readDouble()","2","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","100","opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(String[],Map<String,Object>)","2","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","101","opennlp.tools.util.featuregen.BigramNameFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","102","opennlp.tools.formats.ad.ADNameSampleStream.getNER(String)","2","opennlp.tools.formats.ad.ADNameSampleStreamTest.testSmallSentence [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools]"
"opennlp","103","opennlp.tools.langdetect.LanguageDetectorME.predict(Map<String,MutableInt>)","2","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","104","opennlp.tools.parser.AbstractContextGenerator.cons(Parse,int)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","105","opennlp.tools.namefind.TokenNameFinderFactory.loadDefaultFeatureGeneratorBytes()","2","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools]"
"opennlp","106","opennlp.tools.namefind.RegexNameFinder.find(String[])","2","opennlp.tools.namefind.RegexNameFinderFactoryTest.testLatLong [opennlp-tools],opennlp.tools.namefind.RegexNameFinderFactoryTest.testMgrs [opennlp-tools]"
"opennlp","107","opennlp.tools.util.model.PropertiesSerializer.serialize(Properties,OutputStream)","2","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","108","opennlp.tools.ml.naivebayes.BinaryNaiveBayesModelWriter.writeUTF(String)","2","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools]"
"opennlp","109","opennlp.tools.ml.maxent.quasinewton.QNModel.eval(String[],float[],double[])","2","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","110","opennlp.tools.parser.Parse.insert(Parse)","2","opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","111","opennlp.tools.ml.maxent.io.GISModelWriter.persist()","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","112","opennlp.tools.tokenize.TokSpanEventStream.createEvents(TokenSample)","2","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools]"
"opennlp","113","opennlp.tools.ml.maxent.GISTrainer.findParameters(int,double)","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools]"
"opennlp","114","opennlp.tools.parser.AbstractContextGenerator.checkcons(Parse,String,String,List<String>)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","115","opennlp.tools.util.model.GenericModelSerializer.serialize(AbstractModel,OutputStream)","1","opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","116","opennlp.tools.ml.model.MutableContext.setParameter(int,double)","1","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","117","opennlp.tools.ml.model.AbstractModel.hashCode()","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","118","opennlp.tools.util.Sequence.compareTo(Sequence)","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools]"
"opennlp","119","opennlp.tools.chunker.DefaultChunkerContextGenerator.getContext(int,String[],String[],String[])","1","opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools]"
"opennlp","120","opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(Element,FeatureGeneratorResourceProvider)","1","opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools]"
"opennlp","121","opennlp.tools.ml.perceptron.BinaryPerceptronModelWriter.writeUTF(String)","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools]"
"opennlp","122","opennlp.tools.ml.perceptron.PerceptronModel.eval(String[],float[],double[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","123","opennlp.tools.langdetect.LanguageDetectorME.updateCounts(String[],Map<String,MutableInt>)","1","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","124","opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int,String[],String[],String)","1","opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testBeginFollowedByContinue [opennlp-tools]"
"opennlp","125","opennlp.tools.formats.conllu.ConlluStream.mergeAnnotation(ConlluWordLine,List<ConlluWordLine>)","1","opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300 [opennlp-tools]"
"opennlp","126","opennlp.tools.util.BaseToolFactory.create(String,ArtifactProvider)","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools]"
"opennlp","127","opennlp.tools.util.featuregen.TokenClassFeatureGeneratorFactory.create()","1","opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools]"
"opennlp","128","opennlp.tools.util.model.BaseModel.createArtifactSerializers()","1","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools]"
"opennlp","129","opennlp.tools.ml.model.UniformPrior.logPrior(double[],int[])","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","130","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.indexOf(int,int)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","131","opennlp.tools.ml.model.AbstractModelReader.readUTF()","1","opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","132","opennlp.tools.ml.model.HashSumEventStream.calculateHashSum()","1","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools]"
"opennlp","133","opennlp.tools.ml.AbstractTrainer.display(String)","1","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools]"
"opennlp","134","opennlp.tools.util.featuregen.PrefixFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","135","opennlp.tools.util.Version.parse(String)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","136","opennlp.tools.cmdline.EvaluationErrorPrinter.printErrors(List<Span>,List<Span>,String[])","1","opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative [opennlp-tools]"
"opennlp","137","opennlp.tools.namefind.DefaultNameContextGenerator.getContext(int,String[],String[],Object[])","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","138","opennlp.tools.tokenize.TokenSample.parse(String,String)","1","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","139","opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(Class<T>,String)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","140","opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist()","1","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","141","opennlp.tools.dictionary.Dictionary.put(StringList)","1","opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookup [opennlp-tools]"
"opennlp","142","opennlp.tools.util.featuregen.TokenFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","143","opennlp.tools.tokenize.DefaultTokenContextGenerator.addCharPreds(String,char,List<String>)","1","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","144","opennlp.tools.formats.nkjp.NKJPSegmentationDocument.parse(InputStream)","1","opennlp.tools.formats.nkjp.NKJPSegmentationDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","145","opennlp.tools.util.StringUtil.toUpperCase(CharSequence)","1","opennlp.tools.formats.ad.ADChunkSampleStreamTest.testChunks [opennlp-tools]"
"opennlp","146","opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(String)","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","147","opennlp.tools.util.model.ModelUtil.writeModel(MaxentModel,OutputStream)","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","148","opennlp.tools.ml.model.Context.equals(Object)","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","149","opennlp.tools.postag.POSSampleEventStream.generateEvents(String[],String[],Object[],POSContextGenerator)","1","opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","150","opennlp.tools.ml.model.RealValueFileEventStream.read()","1","opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting [opennlp-tools]"
"opennlp","151","opennlp.tools.parser.Parse.pruneParse(Parse)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","152","opennlp.tools.langdetect.LanguageDetectorME.seenEnough(List<Language[]>,Language[],Map<String,MutableInt>,LanguageDetectorConfig)","1","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools]"
"opennlp","153","opennlp.tools.sentdetect.NewlineSentenceDetector.sentPosDetect(String)","1","opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFilter [opennlp-tools]"
"opennlp","154","opennlp.tools.util.model.GenericModelSerializer.create(InputStream)","1","opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel [opennlp-tools]"
"opennlp","155","opennlp.tools.parser.lang.en.HeadRules.serialize(Writer)","1","opennlp.tools.parser.lang.en.HeadRulesTest.testSerialization [opennlp-tools]"
"opennlp","156","opennlp.tools.util.featuregen.CachedFeatureGenerator.updateAdaptiveData(String[],String[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools]"
"opennlp","157","opennlp.tools.postag.POSTaggerFactory.createFeatureGenerators()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","158","opennlp.tools.ml.model.AbstractModel.getOutcome(int)","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools]"
"opennlp","159","opennlp.tools.namefind.NameFinderEventStream.generateEvents(String[],String[],NameContextGenerator)","1","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","160","opennlp.tools.parser.Parse.getChildren()","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","161","opennlp.tools.formats.brat.BratDocument.parseDocument(AnnotationConfiguration,String,InputStream,InputStream)","1","opennlp.tools.formats.brat.BratDocumentParserTest.testParse [opennlp-tools]"
"opennlp","162","opennlp.tools.formats.conllu.ConlluStream.read()","1","opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction [opennlp-tools]"
"opennlp","163","opennlp.tools.sentdetect.DefaultEndOfSentenceScanner.getPositions(char[])","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","164","opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.computeOutcomePatterns(ComparablePredicate[])","1","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","165","opennlp.tools.ml.maxent.quasinewton.QNModel.getPredIndex(String)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","166","opennlp.tools.ml.ArrayMath.l1norm(double[])","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools]"
"opennlp","167","opennlp.tools.namefind.NameSample.equals(Object)","1","opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","168","opennlp.tools.namefind.NameSample.parse(String,String,boolean)","1","opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools]"
"opennlp","169","opennlp.tools.ml.maxent.io.GISModelWriter.compressOutcomes(ComparablePredicate[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","170","opennlp.tools.namefind.NameFinderME.extractNameType(String)","1","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","171","opennlp.tools.parser.lang.en.HeadRules.getHead(Parse[],String)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","172","opennlp.tools.ml.model.AbstractDataIndexer.display(String)","1","opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining [opennlp-tools]"
"opennlp","173","opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.clearAdaptiveData()","1","opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools]"
"opennlp","174","opennlp.tools.util.XmlUtil.createSaxParser()","1","opennlp.tools.formats.letsmt.LetsmtDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","175","opennlp.tools.parser.AbstractContextGenerator.punctbo(Parse,int)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","176","opennlp.tools.parser.Parse.getTagNodes()","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","177","opennlp.tools.parser.treeinsert.ParserEventStream.addParseEvents(List<Event>,Parse[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","178","opennlp.tools.ml.model.AbstractModelReader.getParameters(int[][])","1","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools]"
"opennlp","179","opennlp.tools.sentdetect.DefaultSDContextGenerator.collectFeatures(String,String,String,String,Character)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","180","opennlp.tools.util.AbstractObjectStream.read()","1","opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools]"
"opennlp","181","opennlp.tools.util.Span.spansToStrings(Span[],CharSequence)","1","opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes [opennlp-tools]"
"opennlp","182","opennlp.tools.ml.model.EvalParameters.getParams()","1","opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools]"
"opennlp","183","opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","184","opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.parse(InputStream)","1","opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","185","opennlp.tools.parser.AbstractBottomUpParser.collapsePunctuation(Parse[],Set<String>)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","186","opennlp.tools.doccat.DocumentCategorizerContextGenerator.getContext(String[],Map<String,Object>)","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","187","opennlp.tools.formats.ad.ADNameSampleStream.processLexeme(String)","1","opennlp.tools.formats.ad.ADNameSampleStreamTest.testNames [opennlp-tools]"
"opennlp","188","opennlp.tools.util.featuregen.PrefixFeatureGeneratorFactory.create()","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","189","opennlp.tools.postag.POSSample.parse(String)","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","190","opennlp.tools.sentdetect.SentenceSampleStream.replaceNewLineEscapeTags(String)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools]"
