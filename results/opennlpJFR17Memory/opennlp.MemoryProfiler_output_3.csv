"Project","MethodIndex","Method","Count","Tests"
"opennlp","1","opennlp.tools.ml.maxent.GISModel.eval(int[],float[],double[],EvalParameters)","4035","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizationOfStringWithWindowsNewLineTokens [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testNewLineAwareTokenization [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.downloadNonExistentModel [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing [opennlp-tools]"
"opennlp","2","opennlp.tools.util.StringUtil.toLowerCase(CharSequence)","1853","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeEmpty [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","3","opennlp.tools.ml.perceptron.PerceptronTrainer.findParameters(int,boolean)","683","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","4","opennlp.tools.ml.perceptron.PerceptronModel.eval(int[],float[],double[],EvalParameters,boolean)","590","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","5","opennlp.tools.ngram.NGramModel.add(StringList,int,int)","583","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","6","opennlp.tools.ml.model.Event.toString()","453","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testNewLineAwareTokenization [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.downloadNonExistentModel [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizationOfStringWithWindowsNewLineTokens [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","7","opennlp.tools.ngram.NGramModel.setCount(StringList,int)","367","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","8","opennlp.tools.ngram.NGramCharModel.add(CharSequence,int,int)","338","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","9","opennlp.tools.ml.model.HashSumEventStream.read()","301","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testNewLineAwareTokenization [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizationOfStringWithWindowsNewLineTokens [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","10","opennlp.tools.ml.naivebayes.LogProbabilities.addIn(T,double,int)","165","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","11","opennlp.tools.ml.model.AbstractDataIndexer.index(ObjectStream<Event>,Map<String,Integer>)","125","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndex [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3 [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testNewLineAwareTokenization [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testInitialSanity [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizationOfStringWithWindowsNewLineTokens [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","12","opennlp.tools.ml.model.AbstractDataIndexer.update(String[],Map<String,Integer>)","105","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testNewLineAwareTokenization [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.downloadNonExistentModel [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","13","opennlp.tools.ngram.NGramCharModel.add(String)","83","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","14","opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int,Object[],String[])","55","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.dictionaryMatch [opennlp-tools]"
"opennlp","15","opennlp.tools.util.StringList.toString()","49","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","16","opennlp.tools.ml.model.TwoPassDataIndexer.computeEventCounts(ObjectStream<Event>,DataOutputStream,Map<String,Integer>,int)","32","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizationOfStringWithWindowsNewLineTokens [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","17","opennlp.tools.parser.Parse.getCoveredText()","30","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","18","opennlp.tools.langdetect.DefaultLanguageDetectorContextGenerator.getContext(CharSequence)","28","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","19","opennlp.tools.parser.Parse.getToken(String)","26","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","20","opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(List<String>,String[],int,String[])","25","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.formats.masc.MascNamedEntitySampleStreamTest.train [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride [opennlp-tools],opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","21","opennlp.tools.util.Version.toString()","24","opennlp.tools.formats.masc.MascNamedEntitySampleStreamTest.train [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","22","opennlp.tools.ml.maxent.GISTrainer.trainModel(int,DataIndexer,Prior,int)","24","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","23","opennlp.tools.ml.maxent.GISTrainer.nextIteration(double,CompletionService<ModelExpectationComputeTask>,int)","23","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","24","opennlp.tools.ml.model.AbstractModel.init(String[],Context[],String[])","19","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizationOfStringWithWindowsNewLineTokens [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.downloadNonExistentModel [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","25","opennlp.tools.parser.AbstractContextGenerator.cons(Parse,int)","18","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","26","opennlp.tools.util.XmlUtil.createDocumentBuilder()","17","opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithTokenClassFeatureGenerator [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithUnkownElement [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGeneratorChildren [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testInsertCachedFeatureGenerator [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWihtSimpleDescriptor [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithCustomGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testParsingSimpleDoc [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithTokenClassFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithUnkownElement [opennlp-tools]"
"opennlp","27","opennlp.tools.util.PlainTextByLineStream.read()","16","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.formats.ad.ADNameSampleStreamTest.testSmallSentence [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","28","opennlp.tools.parser.Parse.getChildren()","16","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","29","opennlp.tools.ngram.NGramModel.add(StringList)","15","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","30","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters()","15","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","31","opennlp.tools.util.XmlUtil.createSaxParser()","15","opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect [opennlp-tools],opennlp.tools.formats.masc.MascNamedEntitySampleStreamTest.train [opennlp-tools],opennlp.tools.formats.masc.MascPOSSampleStreamTest.close [opennlp-tools],opennlp.tools.formats.masc.MascTokenSampleStreamTest.read [opennlp-tools],opennlp.tools.formats.masc.MascSentenceSampleStreamTest.read [opennlp-tools],opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testThereIsExactlyOneSent [opennlp-tools],opennlp.tools.formats.masc.MascPOSSampleStreamTest.train [opennlp-tools],opennlp.tools.formats.masc.MascNamedEntitySampleStreamTest.reset [opennlp-tools],opennlp.tools.formats.masc.MascTokenSampleStreamTest.close [opennlp-tools],opennlp.tools.formats.masc.MascPOSSampleStreamTest.read [opennlp-tools],opennlp.tools.formats.masc.MascTokenSampleStreamTest.train [opennlp-tools],opennlp.tools.formats.masc.MascSentenceSampleStreamTest.reset [opennlp-tools],opennlp.tools.formats.letsmt.LetsmtDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","32","opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(String[],Map<String,Object>)","15","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","33","opennlp.tools.util.model.PropertiesSerializer.serialize(Properties,OutputStream)","15","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools]"
"opennlp","34","opennlp.tools.util.featuregen.TokenFeatureGenerator.createFeatures(List<String>,String[],int,String[])","14","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithoutCache [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","35","opennlp.tools.ml.model.TwoPassDataIndexer.index(ObjectStream<Event>)","14","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","36","opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.serialize(OutputStream,Iterator<Entry>,boolean)","14","opennlp.tools.ngram.NGramModelTest.testSerialize [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.dictionary.DictionaryTest.testSerialization [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testSerialization [opennlp-tools]"
"opennlp","37","opennlp.tools.parser.Parse.parseParse(String,GapLabeler)","14","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","38","opennlp.tools.util.featuregen.CachedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","13","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","39","opennlp.morfologik.builder.MorfologikDictionaryBuilder.build(Path,boolean,boolean,boolean,boolean,boolean)","13","opennlp.morfologik.builder.MorfologikDictionaryBuilderTest.testBuildDictionary [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testNoLemma [opennlp-morfologik-addon],opennlp.morfologik.builder.MorfologikDictionaryBuilderTest.testMultithreading [opennlp-morfologik-addon],opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeInsensitive [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionaryInsensitive [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeMultiLemma [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionarySensitive [opennlp-morfologik-addon]"
"opennlp","40","opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(String)","12","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","41","opennlp.tools.parser.AbstractContextGenerator.consbo(Parse,int)","12","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","42","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(Function)","12","opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet [opennlp-tools]"
"opennlp","43","opennlp.tools.parser.ChunkContextGenerator.chunkandpostagbo(int,String,String)","11","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","44","opennlp.tools.util.Span.getCoveredText(CharSequence)","11","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","45","opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(String)","11","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","46","opennlp.tools.tokenize.WhitespaceTokenizer.tokenizePos(String)","10","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.postag.POSSampleTest.testEquals [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.NameSampleTest.testTypeWithNewLine [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300 [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","47","opennlp.tools.parser.Parse.getType(String)","10","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","48","opennlp.tools.ml.model.AbstractModelReader.getParameters(int[][])","10","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory [opennlp-tools],opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory [opennlp-tools]"
"opennlp","49","opennlp.tools.parser.AbstractBottomUpParser.collapsePunctuation(Parse[],Set<String>)","10","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","50","opennlp.tools.util.featuregen.TokenClassFeatureGenerator.createFeatures(List<String>,String[],int,String[])","10","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesWithType [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.formats.masc.MascPOSSampleStreamTest.train [opennlp-tools]"
"opennlp","51","opennlp.tools.parser.Parse.updateHeads(HeadRules)","9","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","52","opennlp.tools.ml.model.OnePassDataIndexer.computeEventCounts(ObjectStream<Event>,Map<String,Integer>,int)","9","opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndex [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtInitialPoint [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientSanity [opennlp-tools]"
"opennlp","53","opennlp.tools.util.normalizer.EmojiCharSequenceNormalizer.normalize(CharSequence)","8","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","54","opennlp.tools.util.normalizer.NumberCharSequenceNormalizer.normalize(CharSequence)","8","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","55","opennlp.tools.parser.AbstractContextGenerator.cons2(List<String>,Cons,Cons,Collection<Parse>,boolean)","8","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","56","opennlp.tools.dictionary.Dictionary.contains(StringList)","8","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","57","opennlp.tools.ml.model.AbstractDataIndexer.toIndexedStringArray(Map<String,Integer>)","8","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","58","opennlp.tools.doccat.DocumentCategorizerContextGenerator.getContext(String[],Map<String,Object>)","8","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","59","opennlp.tools.tokenize.DefaultTokenContextGenerator.createContext(String,int)","7","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizationOfStringWithWindowsNewLineTokens [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","60","opennlp.tools.tokenize.DefaultTokenContextGenerator.addCharPreds(String,char,List<String>)","7","opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testNewLineAwareTokenization [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.formats.masc.MascTokenSampleStreamTest.train [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","61","opennlp.tools.parser.AbstractContextGenerator.punctbo(Parse,int)","7","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","62","opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(InputStream,EntryInserter)","7","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ngram.NGramModelTest.testFromFile [opennlp-tools],opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString [opennlp-tools]"
"opennlp","63","opennlp.tools.postag.ConfigurablePOSContextGenerator.getContext(int,String[],String[],Object[])","7","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.insufficientTestData [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","64","opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(CharSequence)","7","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","65","opennlp.tools.namefind.DefaultNameContextGenerator.getContext(int,String[],String[],Object[])","7","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","66","opennlp.tools.parser.ChunkContextGenerator.chunkandpostag(int,String,String,String)","7","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","67","opennlp.tools.ml.model.ModelParameterChunker.readUTF(DataInputStream)","7","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","68","opennlp.tools.parser.AbstractContextGenerator.cons3(List<String>,Cons,Cons,Cons,Collection<Parse>,Collection<Parse>,boolean,boolean,boolean)","6","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","69","opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(String)","6","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","70","opennlp.tools.util.featuregen.BigramNameFeatureGenerator.createFeatures(List<String>,String[],int,String[])","6","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","71","opennlp.tools.tokenize.SimpleTokenizer.tokenizePos(String)","6","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","72","opennlp.tools.langdetect.LanguageDetectorSampleStream.read()","5","opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","73","opennlp.tools.parser.ChunkContextGenerator.getContext(int,String[],String[],String[])","5","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","74","opennlp.tools.util.normalizer.AggregateCharSequenceNormalizer.normalize(CharSequence)","5","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","75","opennlp.tools.util.Version.currentVersion()","5","opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools]"
"opennlp","76","opennlp.tools.util.featuregen.SuffixFeatureGenerator.createFeatures(List<String>,String[],int,String[])","5","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","77","opennlp.tools.parser.Parse.getTagNodes()","5","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","78","opennlp.tools.util.featuregen.PrefixFeatureGenerator.createFeatures(List<String>,String[],int,String[])","5","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","79","opennlp.tools.ml.naivebayes.LogProbabilities.get(T)","5","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","80","opennlp.tools.namefind.NameSample.parse(String,String,boolean)","5","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar1 [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","81","opennlp.tools.parser.Parse.insert(Parse)","5","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","82","opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int,DataIndexer)","4","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","83","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainingStats(EvalParameters)","4","opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools]"
"opennlp","84","opennlp.tools.parser.AbstractContextGenerator.checkcons(Parse,String,String,List<String>)","4","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","85","opennlp.tools.formats.ad.ADSentenceStream.read()","4","opennlp.tools.formats.ad.ADNameSampleStreamTest.testSize [opennlp-tools],opennlp.tools.formats.ad.ADNameSampleStreamTest.testNames [opennlp-tools],opennlp.tools.formats.ad.ADNameSampleStreamTest.testMissingRightContraction [opennlp-tools],opennlp.tools.formats.ad.ADNameSampleStreamTest.testSmallSentence [opennlp-tools]"
"opennlp","86","opennlp.tools.ml.perceptron.PerceptronTrainer.trainingStats(EvalParameters)","4","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","87","opennlp.tools.parser.chunking.BuildContextGenerator.getContext(Parse[],int)","4","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","88","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(int[],float[],double[],EvalParameters,boolean)","4","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools]"
"opennlp","89","opennlp.tools.ml.naivebayes.Probabilities.createMapDataStructure()","4","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools]"
"opennlp","90","opennlp.tools.parser.AbstractContextGenerator.production(Parse,boolean)","4","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","91","opennlp.tools.util.featuregen.AggregatedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","4","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","92","opennlp.tools.ml.AbstractEventTrainer.getDataIndexer(ObjectStream<Event>)","4","opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","93","opennlp.tools.ml.BeamSearch.bestSequences(int,T[],Object[],double,BeamSearchContextGenerator<T>,SequenceValidator<T>)","4","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","94","opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(CharSequence)","4","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools]"
"opennlp","95","opennlp.tools.ml.model.AbstractDataIndexer.sortAndMerge(List<ComparableEvent>,boolean)","4","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizationOfStringWithWindowsNewLineTokens [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools]"
"opennlp","96","opennlp.tools.util.featuregen.GeneratorFactory.createDOM(InputStream)","4","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWihtSimpleDescriptor [opennlp-tools]"
"opennlp","97","opennlp.tools.parser.AbstractContextGenerator.surround(Parse,int,String,Collection<Parse>,List<String>)","4","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","98","opennlp.tools.cmdline.ArgumentParser.validateArgumentsLoudly(String[],Class<?>...)","4","opennlp.tools.cmdline.CLITest.testToolParameterMessage [opennlp-tools],opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsZeroArguments [opennlp-tools],opennlp.tools.cmdline.ArgumentParserTest.testDefaultEncodingParameter [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools]"
"opennlp","99","opennlp.tools.ml.model.DataIndexerFactory.getDataIndexer(TrainingParameters,Map<String,String>)","3","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","100","opennlp.tools.langdetect.LanguageDetectorME.updateCounts(String[],Map<String,MutableInt>)","3","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","101","opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(String,String)","3","opennlp.morfologik.builder.MorfologikDictionaryBuilderTest.testMultithreading [opennlp-morfologik-addon]"
"opennlp","102","opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.sortValues()","3","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","103","opennlp.tools.ml.maxent.io.GISModelWriter.sortValues()","3","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","104","opennlp.tools.ml.ArrayMath.toDoubleArray(List<Double>)","3","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","105","opennlp.tools.parser.chunking.CheckContextGenerator.getContext(Parse[],String,int,int)","3","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","106","opennlp.tools.ml.model.OnePassDataIndexer.index(ObjectStream<Event>)","3","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01 [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testDomainDimensionSanity [opennlp-tools],opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing [opennlp-tools]"
"opennlp","107","opennlp.tools.postag.POSSample.parse(String)","3","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools]"
"opennlp","108","opennlp.tools.chunker.DefaultChunkerContextGenerator.getContext(int,String[],String[],String[])","3","opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","109","opennlp.tools.ml.AbstractEventTrainer.train(ObjectStream<Event>)","3","opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.downloadNonExistentModel [opennlp-tools]"
"opennlp","110","opennlp.tools.util.featuregen.StringPattern.recognize(String)","3","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.morfologik.tagdict.MorfologikPOSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","111","opennlp.tools.parser.treeinsert.CheckContextGenerator.getContext(Parse,Parse[],int,boolean)","3","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","112","opennlp.tools.parser.treeinsert.Parser.getRightFrontier(Parse,Set<String>)","3","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","113","opennlp.tools.ml.naivebayes.LogProbabilities.normalize()","3","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","114","opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(CharSequence)","2","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools]"
"opennlp","115","opennlp.tools.namefind.BioCodec.createSequenceValidator()","2","opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.namefind.BioCodecTest.testCreateSequenceValidator [opennlp-tools]"
"opennlp","116","opennlp.tools.ml.perceptron.PerceptronModel.eval(String[],float[],double[])","2","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","117","opennlp.tools.formats.nkjp.NKJPTextDocument.parse(InputStream)","2","opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testParsingSimpleDoc [opennlp-tools],opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testGetParagraphs [opennlp-tools]"
"opennlp","118","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(String[],float[],double[])","2","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","119","opennlp.tools.util.StringUtil.getShortestEditScript(String,String)","2","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","120","opennlp.tools.namefind.NameSample.getSentence()","2","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","121","opennlp.tools.namefind.NameSampleDataStream.read()","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","122","opennlp.tools.ngram.NGramUtils.getNGrams(String[],int)","2","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","123","opennlp.tools.parser.AbstractBottomUpParser.buildDictionary(ObjectStream<Parse>,HeadRules,TrainingParameters)","2","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","124","opennlp.tools.ml.maxent.GISModel.eval(String[],float[],double[])","2","opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","125","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(String[])","2","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","126","opennlp.tools.parser.Parse.clone()","2","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","127","opennlp.tools.ngram.NGramCharModel.setCount(String,int)","2","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","128","opennlp.tools.parser.treeinsert.AttachContextGenerator.getContext(Parse[],int,List<Parse>,int)","2","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","129","opennlp.tools.lemmatizer.LemmaSample.getTags()","2","opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","130","opennlp.tools.parser.treeinsert.ParserEventStream.addParseEvents(List<Event>,Parse[])","2","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","131","opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","132","opennlp.uima.normalizer.NumberUtil.isLanguageSupported(String)","2","opennlp.uima.normalizer.NumberUtilTest.parse_long [opennlp-uima],opennlp.uima.normalizer.NumberUtilTest.parse_double_with_exception [opennlp-uima]"
"opennlp","133","opennlp.tools.ml.model.Context.hashCode()","2","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","134","opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","135","opennlp.tools.ml.maxent.io.GISModelWriter.persist()","2","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools]"
"opennlp","136","opennlp.tools.tokenize.TokSpanEventStream.createEvents(TokenSample)","2","opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools]"
"opennlp","137","opennlp.tools.parser.chunking.ParserEventStream.addParseEvents(List<Event>,Parse[])","2","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","138","opennlp.tools.ml.TrainerFactory.createBuiltinTrainer(Class<?extendsTrainer>)","2","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","139","opennlp.tools.util.PlainTextByLineStream.reset()","2","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","140","opennlp.tools.ml.AbstractMLModelWriter.persist()","2","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools]"
"opennlp","141","opennlp.tools.formats.conllu.ConlluStream.mergeAnnotation(ConlluWordLine,List<ConlluWordLine>)","2","opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction [opennlp-tools],opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction [opennlp-tools]"
"opennlp","142","opennlp.tools.util.model.BaseModel.createArtifactSerializers()","2","opennlp.tools.formats.masc.MascTokenSampleStreamTest.train [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","143","opennlp.tools.parser.AbstractContextGenerator.checkcons(Parse,Parse,String,List<String>)","2","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools],opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","144","opennlp.tools.util.featuregen.PrefixFeatureGenerator.getPrefixes(String)","2","opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","145","opennlp.tools.util.model.ModelUtil.writeModel(MaxentModel,OutputStream)","2","opennlp.tools.tokenize.TokenizerModelTest.testTokenizerModelSerialization [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","146","opennlp.tools.parser.Parse.pruneParse(Parse)","2","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","147","opennlp.tools.util.Span.hashCode()","2","opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","148","opennlp.tools.formats.masc.MascWordParser.startElement(String,String,String,Attributes)","2","opennlp.tools.formats.masc.MascPOSSampleStreamTest.close [opennlp-tools],opennlp.tools.formats.masc.MascTokenSampleStreamTest.train [opennlp-tools]"
"opennlp","149","opennlp.tools.util.ObjectStreamUtils.createObjectStream(Collection<T>)","2","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools]"
"opennlp","150","opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(String[],String[])","2","opennlp.morfologik.builder.MorfologikDictionaryBuilderTest.testMultithreading [opennlp-morfologik-addon]"
"opennlp","151","opennlp.tools.formats.masc.MascTokenSampleStream.read()","2","opennlp.tools.formats.masc.MascTokenSampleStreamTest.close [opennlp-tools],opennlp.tools.formats.masc.MascTokenSampleStreamTest.read [opennlp-tools]"
"opennlp","152","opennlp.tools.cmdline.ArgumentParser.parse(String[],Class<T>)","2","opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools]"
"opennlp","153","opennlp.tools.formats.masc.MascPOSSampleStream.read()","1","opennlp.tools.formats.masc.MascPOSSampleStreamTest.read [opennlp-tools]"
"opennlp","154","opennlp.tools.util.eval.Evaluator.evaluate(ObjectStream<T>)","1","opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","155","opennlp.morfologik.lemmatizer.MorfologikLemmatizer.asString(CharSequence)","1","opennlp.morfologik.builder.MorfologikDictionaryBuilderTest.testMultithreading [opennlp-morfologik-addon]"
"opennlp","156","opennlp.tools.parser.Parse.addPreviousPunctuation(Parse)","1","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","157","opennlp.tools.tokenize.TokenizerME.train(ObjectStream<TokenSample>,TokenizerFactory,TrainingParameters)","1","opennlp.tools.tokenize.TokenizerModelTest.testTokenizerModelSerialization [opennlp-tools]"
"opennlp","158","opennlp.tools.util.TrainingParameters.getKey(String,String)","1","opennlp.tools.parser.chunking.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","159","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(DataIndexer)","1","opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel [opennlp-tools]"
"opennlp","160","opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(Element,FeatureGeneratorResourceProvider)","1","opennlp.tools.postag.POSTaggerMETest.insufficientTestData [opennlp-tools]"
"opennlp","161","opennlp.tools.ml.model.AbstractModelReader.getOutcomePatterns()","1","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","162","opennlp.tools.util.featuregen.TokenClassFeatureGeneratorFactory.create()","1","opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools]"
"opennlp","163","opennlp.tools.ml.perceptron.PerceptronModel.eval(Context[],float[],double[],EvalParameters,boolean)","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools]"
"opennlp","164","opennlp.tools.parser.ChunkSampleStream.read()","1","opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","165","opennlp.tools.ml.maxent.io.BinaryGISModelWriter.writeUTF(String)","1","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","166","opennlp.tools.ngram.NGramUtils.getNMinusOneTokenFirst(StringList)","1","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools]"
"opennlp","167","opennlp.tools.formats.nkjp.NKJPSegmentationDocument.parse(InputStream)","1","opennlp.tools.formats.nkjp.NKJPSegmentationDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","168","opennlp.tools.postag.POSTaggerME.train(String,ObjectStream<POSSample>,TrainingParameters,POSTaggerFactory)","1","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools]"
"opennlp","169","opennlp.tools.ml.model.RealValueFileEventStream.read()","1","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint [opennlp-tools]"
"opennlp","170","opennlp.tools.util.featuregen.DefinitionFeatureGeneratorFactory.create()","1","opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGeneratorChild [opennlp-tools]"
"opennlp","171","opennlp.tools.util.model.GenericModelSerializer.create(InputStream)","1","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools]"
"opennlp","172","opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int,String[],String[],String)","1","opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndSameType [opennlp-tools]"
"opennlp","173","opennlp.tools.parser.treeinsert.ParserEventStream.getNonAdjoinedParent(Parse)","1","opennlp.tools.parser.treeinsert.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","174","opennlp.tools.formats.conllu.ConlluStream.read()","1","opennlp.tools.formats.conllu.ConlluSentenceSampleStreamTest.testParseTwoSentences [opennlp-tools]"
"opennlp","175","opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(CharSequence,int)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","176","opennlp.tools.parser.lang.en.HeadRules.getHead(Parse[],String)","1","opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","177","opennlp.tools.parser.Parse.adjoin(Parse,HeadRules)","1","opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","178","opennlp.tools.lemmatizer.LemmaSample.getLemmas()","1","opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","179","opennlp.tools.chunker.ChunkSample.getTags()","1","opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample [opennlp-tools]"
"opennlp","180","opennlp.tools.util.TokenTag.extractTokens(TokenTag[])","1","opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","181","opennlp.tools.formats.masc.MascDocument.readText(InputStream)","1","opennlp.tools.formats.masc.MascPOSSampleStreamTest.train [opennlp-tools]"
"opennlp","182","opennlp.tools.doccat.DocumentSampleStream.read()","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","183","opennlp.tools.parser.treeinsert.BuildContextGenerator.getContext(Parse[],int)","1","opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","184","opennlp.tools.ml.maxent.GISTrainer.findParameters(int,double)","1","opennlp.tools.tokenize.TokenizerMETest.testNewLineAwareTokenization [opennlp-tools]"
"opennlp","185","opennlp.tools.parser.chunking.ParserEventStream.reduceChunks(Parse[],int,Parse)","1","opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","186","opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(String[],String[],String[])","1","opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest.testEvaluator [opennlp-tools]"
"opennlp","187","opennlp.tools.ml.model.ModelParameterChunker.writeUTF(DataOutputStream,String)","1","opennlp.tools.ml.model.ModelParameterChunkerTest.testWriteReadUTFWithChunking [opennlp-tools]"
"opennlp","188","opennlp.tools.namefind.NameFinderME.train(String,String,ObjectStream<NameSample>,TrainingParameters,TokenNameFinderFactory)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","189","opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.updateAdaptiveData(String[],String[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools]"
"opennlp","190","opennlp.tools.ml.ArrayMath.toIntArray(List<Integer>)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","191","opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence [opennlp-tools]"
"opennlp","192","opennlp.tools.dictionary.Dictionary.serialize(OutputStream)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","193","opennlp.tools.ml.maxent.GISTrainer.trainModel(ObjectStream<Event>,int,int)","1","opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4 [opennlp-tools]"
"opennlp","194","opennlp.tools.ngram.NGramGenerator.generate(List<String>,int,String)","1","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools]"
"opennlp","195","opennlp.tools.formats.brat.BratAnnotationStream.read()","1","opennlp.tools.formats.brat.BratDocumentTest.testSpanWithMultiFragments [opennlp-tools]"
"opennlp","196","opennlp.tools.parser.Parse.hashCode()","1","opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","197","opennlp.tools.cmdline.CmdLineUtil.checkInputFile(String,File)","1","opennlp.tools.cmdline.TokenNameFinderToolTest.invalidModel [opennlp-tools]"
"opennlp","198","opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(Class<T>,String)","1","opennlp.tools.ml.TrainerFactoryTest.testSequenceTrainerValid [opennlp-tools]"
"opennlp","199","opennlp.tools.cmdline.ArgumentParser.createUsage(Class<?>...)","1","opennlp.tools.cmdline.CLITest.testHelpMessageOfTools [opennlp-tools]"
"opennlp","200","opennlp.tools.parser.ParseSampleStream.read()","1","opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","201","opennlp.tools.formats.masc.MascDocument.parseSentences(InputStream)","1","opennlp.tools.formats.masc.MascPOSSampleStreamTest.train [opennlp-tools]"
"opennlp","202","opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.computeInParallel(double[],Class<?extendsComputeTask>)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","203","opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(String[],Map<String,Object>)","1","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools]"
"opennlp","204","opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappingsClassicFormat(Element)","1","opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools]"
"opennlp","205","opennlp.tools.ngram.NGramUtils.getNMinusOneTokenLast(StringList)","1","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools]"
"opennlp","206","opennlp.tools.formats.ad.ADNameSampleStream.getNER(String)","1","opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools]"
"opennlp","207","opennlp.tools.langdetect.LanguageDetectorME.predict(Map<String,MutableInt>)","1","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","208","opennlp.tools.sentdetect.SentenceSampleStream.read()","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools]"
"opennlp","209","opennlp.tools.util.featuregen.SuffixFeatureGenerator.getSuffixes(String)","1","opennlp.tools.parser.chunking.ParserTest.testModelSerializationAndEquality [opennlp-tools]"
"opennlp","210","opennlp.tools.parser.Parse.addNextPunctuation(Parse)","1","opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","211","opennlp.tools.formats.brat.BratDocument.parseDocument(AnnotationConfiguration,String,InputStream,InputStream)","1","opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing [opennlp-tools]"
"opennlp","212","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(Context[],float[],double[],EvalParameters,boolean)","1","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","213","opennlp.tools.lemmatizer.DefaultLemmatizerContextGenerator.getContext(int,String[],String[],String[])","1","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools]"
"opennlp","214","opennlp.tools.formats.masc.MascDocument.parsePennTags(InputStream)","1","opennlp.tools.formats.masc.MascTokenSampleStreamTest.train [opennlp-tools]"
"opennlp","215","opennlp.tools.util.featuregen.OutcomePriorFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","216","opennlp.tools.cmdline.EvaluationErrorPrinter.printErrors(List<String>,List<String>,List<String>)","1","opennlp.tools.postag.POSEvaluatorTest.testNegative [opennlp-tools]"
"opennlp","217","opennlp.tools.cmdline.CLI.main(String[])","1","opennlp.tools.cmdline.CLITest.testHelpMessageOfTools [opennlp-tools]"
"opennlp","218","opennlp.tools.formats.DocumentSampleStreamFactory.registerFactory()","1","opennlp.tools.cmdline.CLITest.testHelpMessageOfTools [opennlp-tools]"
"opennlp","219","opennlp.tools.chunker.ChunkSample.getPreds()","1","opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","220","opennlp.tools.parser.ParserEvaluator.processSample(Parse)","1","opennlp.tools.parser.ParserEvaluatorTest.testProcessSample [opennlp-tools]"
"opennlp","221","opennlp.tools.postag.POSSample.getTags()","1","opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","222","opennlp.tools.formats.masc.MascNamedEntitySampleStream.read()","1","opennlp.tools.formats.masc.MascNamedEntitySampleStreamTest.reset [opennlp-tools]"
"opennlp","223","opennlp.tools.lemmatizer.LemmaSampleStream.read()","1","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools]"
"opennlp","224","opennlp.tools.util.Sequence.getOutcomes()","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","225","opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.parse(InputStream)","1","opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","226","opennlp.tools.parser.treeinsert.ParserEventStream.init()","1","opennlp.tools.parser.treeinsert.ParserTest.testParsingCheckParentReferencesArePopulated [opennlp-tools]"
"opennlp","227","opennlp.tools.formats.leipzig.LeipzigLanguageSampleStream.read()","1","opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testReadSentenceFiles [opennlp-tools]"
