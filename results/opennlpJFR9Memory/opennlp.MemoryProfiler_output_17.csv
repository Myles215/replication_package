"Project","MethodIndex","Method","Count","Tests"
"opennlp","1","opennlp.tools.util.StringUtil.toLowerCase(CharSequence)","3196","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceEnd [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.langdetect.DefaultLanguageDetectorContextGeneratorTest.extractContext [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookupCaseSensitive [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testLookup [opennlp-tools],opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","2","opennlp.tools.ml.maxent.GISModel.eval(int[],float[],double[],EvalParameters)","1796","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","3","opennlp.tools.ml.perceptron.PerceptronModel.eval(int[],float[],double[],EvalParameters,boolean)","1301","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","4","opennlp.tools.ngram.NGramModel.add(StringList,int,int)","1128","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","5","opennlp.tools.ml.model.HashSumEventStream.read()","775","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","6","opennlp.tools.ngram.NGramModel.setCount(StringList,int)","738","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","7","opennlp.tools.ngram.NGramCharModel.add(CharSequence,int,int)","559","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.ngram.NGramCharModelTest.testContains2 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","8","opennlp.tools.ml.model.Event.toString()","538","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","9","opennlp.tools.ml.naivebayes.LogProbabilities.addIn(T,double,int)","272","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","10","opennlp.tools.ml.model.AbstractDataIndexer.update(String[],Map<String,Integer>)","195","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.model.OnePassDataIndexerTest.testIndex [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","11","opennlp.tools.ngram.NGramCharModel.add(String)","146","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","12","opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int,Object[],String[])","109","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","13","opennlp.tools.ml.model.AbstractDataIndexer.index(ObjectStream<Event>,Map<String,Integer>)","104","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.insufficientTestData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","14","opennlp.tools.util.XmlUtil.createDocumentBuilder()","65","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithUnkownElement [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGeneratorChildren [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testInsertCachedFeatureGenerator [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGeneratorChild [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.formats.nkjp.NKJPSegmentationDocumentTest.testParsingSimpleDoc [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testParameters [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithUnkownElement [opennlp-tools],opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWihtSimpleDescriptor [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithTokenClassFeatureGenerator [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testGetParagraphs [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWihtSimpleDescriptor [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithCustomGenerator [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.insufficientTestData [opennlp-tools],opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testParsingSimpleDoc [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithTokenClassFeatureGenerator [opennlp-tools]"
"opennlp","15","opennlp.tools.ml.model.AbstractModel.init(String[],Context[],String[])","64","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","16","opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(InputStream,EntryInserter)","40","opennlp.tools.ngram.NGramModelTest.testFromInvalidFileMissingCount [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary [opennlp-tools],opennlp.tools.ngram.NGramModelTest.testInvalidFormat [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString2 [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory [opennlp-tools],opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testToString [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testEqualsAndHashCode [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSimpleCount [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary [opennlp-tools],opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory [opennlp-tools],opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer [opennlp-tools],opennlp.tools.ngram.NGramModelTest.testSerialize [opennlp-tools],opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testLoadingDictionaryWithoutCaseAttribute [opennlp-tools],opennlp.tools.ngram.NGramModelTest.testFromFile [opennlp-tools]"
"opennlp","17","opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.serialize(OutputStream,Iterator<Entry>,boolean)","38","opennlp.tools.ngram.NGramModelTest.testSerialize [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.dictionary.DictionaryTest.testSerialization [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testSerialization [opennlp-tools]"
"opennlp","18","opennlp.tools.ml.maxent.GISTrainer.trainModel(int,DataIndexer,Prior,int)","34","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","19","opennlp.tools.util.PlainTextByLineStream.reset()","32","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes [opennlp-tools],opennlp.tools.formats.Conll02NameSampleStreamTest.testReset [opennlp-tools],opennlp.tools.formats.ad.ADPOSSampleStreamTest.testExpandME [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.formats.ad.ADPOSSampleStreamTest.testSimple [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSample [opennlp-tools],opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSample [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.formats.conllu.ConlluSentenceSampleStreamTest.testParseTwoSentences [opennlp-tools],opennlp.tools.formats.NameFinderCensus90NameStreamTest.testParsingEnglishSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.namefind.NameSampleTypeFilterTest.testSingleFilter [opennlp-tools],opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluator [opennlp-tools],opennlp.tools.formats.Conll03NameSampleStreamTest.testReset [opennlp-tools],opennlp.tools.formats.ad.ADSentenceSampleStreamTest.testSimpleCount [opennlp-tools],opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample [opennlp-tools],opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest.testEvaluator [opennlp-tools]"
"opennlp","20","opennlp.tools.ml.model.TwoPassDataIndexer.computeEventCounts(ObjectStream<Event>,DataOutputStream,Map<String,Integer>,int)","31","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","21","opennlp.tools.util.featuregen.TokenFeatureGenerator.createFeatures(List<String>,String[],int,String[])","30","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.util.featuregen.TokenFeatureGeneratorTest.testLowerCase [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","22","opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(String)","30","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","23","opennlp.tools.dictionary.Dictionary.contains(StringList)","27","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","24","opennlp.tools.parser.Parse.getCoveredText()","25","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","25","opennlp.tools.langdetect.DefaultLanguageDetectorContextGenerator.getContext(CharSequence)","24","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","26","opennlp.tools.ngram.NGramModel.add(StringList)","23","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","27","opennlp.tools.parser.Parse.parseParse(String,GapLabeler)","23","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.ParseTest.testGetTagNodes [opennlp-tools],opennlp.tools.parser.ParseTest.testTokenReplacement [opennlp-tools],opennlp.tools.parser.ParseTest.testToHashCode [opennlp-tools],opennlp.tools.parser.ParseTest.testEquals [opennlp-tools],opennlp.tools.parser.ParseTest.testShow [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample [opennlp-tools],opennlp.tools.parser.ParseTest.testGetText [opennlp-tools]"
"opennlp","28","opennlp.tools.util.StringList.toString()","21","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","29","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters()","20","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","30","opennlp.tools.ml.model.BinaryFileDataReader.readUTF()","19","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","31","opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(List<String>,String[],int,String[])","19","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","32","opennlp.tools.util.featuregen.StringPattern.recognize(String)","19","opennlp.tools.util.featuregen.StringPatternTest.testIsAllLetters [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testContainsLetters [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testContainsDigit [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testIsAllKatakana [opennlp-tools],opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testShort [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testContainsComma [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testIsInitialCapitalLetter [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testIsAllDigit [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testContainsSlash [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testIsAllHiragana [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testMiddle [opennlp-tools],opennlp.tools.util.featuregen.StringPatternTest.testDigits [opennlp-tools]"
"opennlp","33","opennlp.tools.ml.perceptron.PerceptronTrainer.findParameters(int,boolean)","18","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","34","opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int,DataIndexer)","16","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","35","opennlp.tools.util.Version.currentVersion()","15","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","36","opennlp.morfologik.builder.MorfologikDictionayBuilder.build(Path,boolean,boolean,boolean,boolean,boolean)","15","opennlp.morfologik.builder.POSDictionayBuilderTest.testBuildDictionary [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testNoLemma [opennlp-morfologik-addon],opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeInsensitive [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionaryInsensitive [opennlp-morfologik-addon],opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeMultiLemma [opennlp-morfologik-addon],opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionarySensitive [opennlp-morfologik-addon],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","37","opennlp.tools.ml.model.AbstractModelReader.getParameters(int[][])","15","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools]"
"opennlp","38","opennlp.tools.util.featuregen.TokenClassFeatureGenerator.createFeatures(List<String>,String[],int,String[])","15","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","39","opennlp.tools.util.Span.getCoveredText(CharSequence)","15","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","40","opennlp.tools.util.normalizer.EmojiCharSequenceNormalizer.normalize(CharSequence)","14","opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","41","opennlp.tools.util.normalizer.NumberCharSequenceNormalizer.normalize(CharSequence)","14","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","42","opennlp.tools.chunker.DefaultChunkerContextGenerator.getContext(int,String[],String[],String[])","14","opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","43","opennlp.tools.ml.maxent.GISTrainer.display(String)","14","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.maxent.ScaleDoesntMatterTest.testScaleResults [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","44","opennlp.tools.tokenize.WhitespaceTokenizer.tokenizePos(String)","13","opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence [opennlp-tools],opennlp.tools.tokenize.WhitespaceTokenStreamTest.testWhitespace [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.postag.WordTagSampleStreamTest.testParseSimpleSample [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSSampleTest.testPOSSampleSerDe [opennlp-tools],opennlp.tools.postag.POSSampleTest.testParseWithError [opennlp-tools],opennlp.tools.tokenize.WhitespaceTokenStreamTest.testTokenizerStream [opennlp-tools],opennlp.tools.postag.POSSampleTest.testParseEmtpyToken [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","45","opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(CharSequence)","13","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","46","opennlp.tools.parser.AbstractContextGenerator.cons3(List<String>,Cons,Cons,Cons,Collection<Parse>,Collection<Parse>,boolean,boolean,boolean)","12","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","47","opennlp.tools.dictionary.Dictionary.put(StringList)","12","opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderTest.testLongerTokenNameIsPreferred [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testBuildNGramDictionary [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameInsideSentence [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testDifferentCaseLookup [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testLookup [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderTest.testLastMatchingTokenNameIsChoosen [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSetDiffCase [opennlp-tools]"
"opennlp","48","opennlp.tools.parser.AbstractContextGenerator.consbo(Parse,int)","12","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","49","opennlp.tools.util.PlainTextByLineStream.read()","12","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","50","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(Function)","12","opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet [opennlp-tools]"
"opennlp","51","opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(String[],Map<String,Object>)","12","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","52","opennlp.tools.langdetect.LanguageDetectorSampleStream.read()","11","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","53","opennlp.tools.ml.ArrayMath.toIntArray(List<Integer>)","11","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","54","opennlp.tools.parser.Parse.getChildren()","11","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","55","opennlp.tools.util.featuregen.CachedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","10","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","56","opennlp.tools.ml.maxent.GISTrainer.nextIteration(double,CompletionService<ModelExpectationComputeTask>)","10","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.maxent.ScaleDoesntMatterTest.testScaleResults [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining [opennlp-tools]"
"opennlp","57","opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(String)","10","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testEnd [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","58","opennlp.tools.util.model.ModelUtil.writeModel(MaxentModel,OutputStream)","10","opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","59","opennlp.tools.parser.AbstractContextGenerator.cons(Parse,int)","10","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","60","opennlp.tools.tokenize.SimpleTokenizer.tokenizePos(String)","10","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.tokenize.SimpleTokenizerTest.testWordDotTokenization [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","61","opennlp.tools.ml.model.AbstractDataIndexer.toIndexedStringArray(Map<String,Integer>)","10","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","62","opennlp.tools.namefind.NameSample.parse(String,String,boolean)","10","opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypeAndInvalidData [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.namefind.NameSampleTest.testParseWithAdditionalSpace [opennlp-tools]"
"opennlp","63","opennlp.tools.ml.naivebayes.LogProbabilities.normalize()","10","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","64","opennlp.tools.tokenize.DefaultTokenContextGenerator.addCharPreds(String,char,List<String>)","9","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","65","opennlp.tools.ml.model.TwoPassDataIndexer.index(ObjectStream<Event>)","9","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","66","opennlp.tools.parser.AbstractContextGenerator.cons2(List<String>,Cons,Cons,Collection<Parse>,boolean)","9","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","67","opennlp.tools.util.model.BaseModel.createArtifactSerializers()","9","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","68","opennlp.tools.doccat.DocumentCategorizerContextGenerator.getContext(String[],Map<String,Object>)","9","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","69","opennlp.tools.ml.ArrayMath.toDoubleArray(List<Double>)","8","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","70","opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(CharSequence)","8","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","71","opennlp.tools.namefind.NameSample.getSentence()","7","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","72","opennlp.tools.postag.POSTaggerME.train(String,ObjectStream<POSSample>,TrainingParameters,POSTaggerFactory)","7","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","73","opennlp.tools.util.normalizer.AggregateCharSequenceNormalizer.normalize(CharSequence)","7","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","74","opennlp.tools.ngram.NGramCharModel.setCount(String,int)","7","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","75","opennlp.tools.util.XmlUtil.createSaxParser()","7","opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect [opennlp-tools],opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testThereIsExactlyOneSent [opennlp-tools],opennlp.tools.formats.letsmt.LetsmtDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","76","opennlp.tools.parser.AbstractContextGenerator.punctbo(Parse,int)","7","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","77","opennlp.tools.ml.maxent.io.GISModelWriter.sortValues()","7","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","78","opennlp.tools.util.featuregen.PrefixFeatureGenerator.createFeatures(List<String>,String[],int,String[])","7","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","79","opennlp.tools.ml.naivebayes.LogProbabilities.get(T)","7","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","80","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(Context[],float[],double[],EvalParameters,boolean)","7","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","81","opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(String)","6","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","82","opennlp.tools.parser.AbstractContextGenerator.surround(Parse,int,String,Collection<Parse>,List<String>)","6","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","83","opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(Element,FeatureGeneratorResourceProvider)","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools]"
"opennlp","84","opennlp.tools.ml.model.AbstractModelReader.getOutcomePatterns()","5","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","85","opennlp.tools.tokenize.DefaultTokenContextGenerator.createContext(String,int)","5","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","86","opennlp.tools.ml.perceptron.PerceptronTrainer.trainingStats(EvalParameters)","5","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","87","opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int,String[],String[],String)","5","opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndNotSameType [opennlp-tools],opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterContinueAndNotSameType [opennlp-tools],opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndSameType [opennlp-tools]"
"opennlp","88","opennlp.tools.util.featuregen.SuffixFeatureGenerator.createFeatures(List<String>,String[],int,String[])","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","89","opennlp.tools.parser.AbstractBottomUpParser.collapsePunctuation(Parse[],Set<String>)","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","90","opennlp.tools.util.featuregen.PrefixFeatureGenerator.getPrefixes(String)","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","91","opennlp.tools.parser.Parse.pruneParse(Parse)","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","92","opennlp.tools.ml.model.OnePassDataIndexer.computeEventCounts(ObjectStream<Event>,Map<String,Integer>,int)","5","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing [opennlp-tools]"
"opennlp","93","opennlp.tools.util.model.PropertiesSerializer.serialize(Properties,OutputStream)","5","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","94","opennlp.tools.postag.POSDictionary.create(InputStream)","4","opennlp.tools.postag.POSDictionaryTest.testEqualsAndHashCode [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary [opennlp-tools],opennlp.tools.postag.POSDictionaryTest.testSerialization [opennlp-tools]"
"opennlp","95","opennlp.tools.langdetect.LanguageDetectorME.updateCounts(String[],Map<String,MutableInt>)","4","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","96","opennlp.tools.parser.Parse.getToken(String)","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","97","opennlp.tools.ml.maxent.GISModel.eval(String[],float[],double[])","4","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools]"
"opennlp","98","opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.sortValues()","4","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","99","opennlp.tools.parser.Parse.getType(String)","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","100","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(int[],float[],double[],EvalParameters,boolean)","4","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","101","opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.createFeatures(List<String>,String[],int,String[])","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","102","opennlp.tools.tokenize.TokSpanEventStream.createEvents(TokenSample)","4","opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","103","opennlp.tools.util.ObjectStreamUtils.createObjectStream(T...)","4","opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString [opennlp-tools],opennlp.tools.tokenize.WhitespaceTokenStreamTest.testSeparatedString [opennlp-tools]"
"opennlp","104","opennlp.tools.namefind.DefaultNameContextGenerator.getContext(int,String[],String[],Object[])","4","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","105","opennlp.tools.parser.treeinsert.Parser.getRightFrontier(Parse,Set<String>)","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","106","opennlp.tools.parser.Parse.insert(Parse)","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","107","opennlp.tools.ml.perceptron.PerceptronModel.eval(String[],float[],double[])","3","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools]"
"opennlp","108","opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(Function,double[],LineSearchResult,double)","3","opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection4 [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection1 [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength1 [opennlp-tools]"
"opennlp","109","opennlp.tools.ngram.NGramUtils.getNMinusOneTokenFirst(StringList)","3","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","110","opennlp.tools.tokenize.DetokenizationDictionary.init(InputStream)","3","opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString2 [opennlp-tools],opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString [opennlp-tools]"
"opennlp","111","opennlp.tools.parser.treeinsert.ParserEventStream.getNonAdjoinedParent(Parse)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","112","opennlp.tools.ml.maxent.io.GISModelWriter.compressOutcomes(ComparablePredicate[])","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","113","opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","114","opennlp.tools.parser.chunking.CheckContextGenerator.getContext(Parse[],String,int,int)","3","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","115","opennlp.tools.ml.model.Context.hashCode()","3","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","116","opennlp.tools.postag.POSSample.parse(String)","3","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","117","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.display(String)","3","opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction [opennlp-tools]"
"opennlp","118","opennlp.tools.languagemodel.NGramLanguageModel.add(String...)","3","opennlp.tools.languagemodel.NgramLanguageModelTest.testBigram [opennlp-tools],opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel [opennlp-tools]"
"opennlp","119","opennlp.tools.namefind.NameFinderME.train(String,String,ObjectStream<NameSample>,TrainingParameters,TokenNameFinderFactory)","3","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","120","opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(String...)","3","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools],opennlp.tools.languagemodel.NgramLanguageModelTest.testRandomVocabularyAndSentence [opennlp-tools]"
"opennlp","121","opennlp.tools.ml.maxent.quasinewton.QNModel.eval(String[])","3","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","122","opennlp.tools.ml.AbstractEventTrainer.train(ObjectStream<Event>)","3","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","123","opennlp.tools.postag.POSTaggerFactory.getSequenceValidator()","3","opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools]"
"opennlp","124","opennlp.tools.ml.BeamSearch.bestSequences(int,T[],Object[],double,BeamSearchContextGenerator<T>,SequenceValidator<T>)","3","opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","125","opennlp.tools.ml.model.AbstractDataIndexer.sortAndMerge(List<ComparableEvent>,boolean)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools]"
"opennlp","126","opennlp.tools.util.featuregen.BigramNameFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","127","opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testBegin [opennlp-tools],opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testEnd [opennlp-tools]"
"opennlp","128","opennlp.tools.parser.ChunkContextGenerator.chunkandpostag(int,String,String,String)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","129","opennlp.tools.util.featuregen.SuffixFeatureGenerator.getSuffixes(String)","3","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools]"
"opennlp","130","opennlp.tools.util.featuregen.OutcomePriorFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","131","opennlp.tools.util.model.PropertiesSerializer.create(InputStream)","2","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","132","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainingStats(EvalParameters)","2","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","133","opennlp.tools.parser.AbstractContextGenerator.checkcons(Parse,String,String,List<String>)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","134","opennlp.tools.ml.model.DataIndexerFactory.getDataIndexer(TrainingParameters,Map<String,String>)","2","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","135","opennlp.tools.formats.nkjp.NKJPTextDocument.parse(InputStream)","2","opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testParsingSimpleDoc [opennlp-tools],opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testGetParagraphs [opennlp-tools]"
"opennlp","136","opennlp.tools.parser.ChunkContextGenerator.chunkandpostagbo(int,String,String)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","137","opennlp.tools.parser.ChunkContextGenerator.getContext(int,String[],String[],String[])","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","138","opennlp.tools.sentdetect.SDEventStream.createEvents(SentenceSample)","2","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools]"
"opennlp","139","opennlp.tools.namefind.NameSampleDataStream.read()","2","opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","140","opennlp.tools.chunker.ChunkSampleStream.read()","2","opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents [opennlp-tools]"
"opennlp","141","opennlp.tools.ml.maxent.GISTrainer.trainModel(int,DataIndexer,int)","2","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools]"
"opennlp","142","opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.createFeaturesSuccessiveTokensTest [opennlp-tools]"
"opennlp","143","opennlp.tools.parser.treeinsert.AttachContextGenerator.getContext(Parse[],int,List<Parse>,int)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","144","opennlp.tools.formats.Conll02NameSampleStreamFactory.registerFactory()","2","opennlp.tools.cmdline.CLITest.testToolParameterMessage [opennlp-tools]"
"opennlp","145","opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(CharSequence,int)","2","opennlp.tools.sentdetect.SDEventStreamTest.testEventOutcomes [opennlp-tools],opennlp.tools.sentdetect.DefaultSDContextGeneratorTest.testGetContextWithAbbreviations [opennlp-tools]"
"opennlp","146","opennlp.tools.parser.lang.en.HeadRules.getHead(Parse[],String)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","147","opennlp.tools.ml.naivebayes.Probabilities.createMapDataStructure()","2","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","148","opennlp.tools.parser.Parse.getTagNodes()","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","149","opennlp.tools.dictionary.Dictionary.asStringSet()","2","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testLookup [opennlp-tools]"
"opennlp","150","opennlp.tools.parser.AbstractContextGenerator.production(Parse,boolean)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","151","opennlp.tools.namefind.TokenNameFinderEvaluator.processSample(NameSample)","2","opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative [opennlp-tools]"
"opennlp","152","opennlp.tools.lemmatizer.LemmaSample.getTokens()","2","opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","153","opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(String[],Map<String,Object>)","2","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","154","opennlp.tools.parser.AbstractContextGenerator.checkcons(Parse,Parse,String,List<String>)","2","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","155","opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(Class<T>,String)","2","opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testArtifactToSerializerMappingExtraction [opennlp-tools]"
"opennlp","156","opennlp.tools.parser.ParseSampleStream.read()","2","opennlp.tools.parser.ParseSampleStreamTest.testReadTestStream [opennlp-tools],opennlp.tools.parser.PosSampleStreamTest.testConvertParseToPosSample [opennlp-tools]"
"opennlp","157","opennlp.tools.lemmatizer.LemmatizerModel.getLemmatizerSequenceModel()","2","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools]"
"opennlp","158","opennlp.tools.parser.treeinsert.CheckContextGenerator.getContext(Parse,Parse[],int,boolean)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","159","opennlp.tools.parser.treeinsert.Parser.train(String,ObjectStream<Parse>,HeadRules,TrainingParameters)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","160","opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappingsClassicFormat(Element)","2","opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testArtifactToSerializerMappingExtraction [opennlp-tools],opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testDictionaryArtifactToSerializerMappingExtraction [opennlp-tools]"
"opennlp","161","opennlp.tools.util.Span.hashCode()","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","162","opennlp.tools.formats.brat.BratDocument.parseDocument(AnnotationConfiguration,String,InputStream,InputStream)","2","opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing [opennlp-tools]"
"opennlp","163","opennlp.tools.sentdetect.SentenceDetectorME.train(String,ObjectStream<SentenceSample>,SentenceDetectorFactory,TrainingParameters)","2","opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools]"
"opennlp","164","opennlp.tools.ml.perceptron.PerceptronModelWriter.sortValues()","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools]"
"opennlp","165","opennlp.tools.namefind.BioCodec.encode(Span[],int)","1","opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools]"
"opennlp","166","opennlp.tools.formats.muc.SgmlParser.extractTagName(CharSequence)","1","opennlp.tools.formats.muc.SgmlParserTest.testParse1 [opennlp-tools]"
"opennlp","167","opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(CharSequence)","1","opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","168","opennlp.tools.ml.perceptron.BinaryPerceptronModelWriter.writeUTF(String)","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools]"
"opennlp","169","opennlp.tools.util.ParagraphStream.read()","1","opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample [opennlp-tools]"
"opennlp","170","opennlp.tools.parser.ChunkSampleStream.getInitialChunks(Parse,List<Parse>)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","171","opennlp.tools.parser.ChunkSampleStream.read()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","172","opennlp.tools.ngram.NGramModel.add(CharSequence,int,int)","1","opennlp.tools.util.featuregen.CharacterNgramFeatureGeneratorTest.testDefault [opennlp-tools]"
"opennlp","173","opennlp.tools.tokenize.TokenSample.parse(String,String)","1","opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString [opennlp-tools]"
"opennlp","174","opennlp.tools.parser.chunking.BuildContextGenerator.getContext(Parse[],int)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","175","opennlp.tools.ngram.NGramUtils.getNGrams(String[],int)","1","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","176","opennlp.tools.chunker.DefaultChunkerSequenceValidator.validOutcome(String,String)","1","opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools]"
"opennlp","177","opennlp.tools.doccat.DocumentCategorizerME.train(String,ObjectStream<DocumentSample>,TrainingParameters,DoccatFactory)","1","opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining [opennlp-tools]"
"opennlp","178","opennlp.tools.util.StringUtil.isWhitespace(char)","1","opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","179","opennlp.tools.util.Span.trim(CharSequence)","1","opennlp.tools.util.SpanTest.testTrimWhitespaceSpan [opennlp-tools]"
"opennlp","180","opennlp.tools.util.StringList.iterator()","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","181","opennlp.tools.tokenize.DefaultTokenContextGenerator.getContext(String,int)","1","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools]"
"opennlp","182","opennlp.tools.util.model.BaseModel.serialize(OutputStream)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools]"
"opennlp","183","opennlp.tools.formats.nkjp.NKJPSegmentationDocument.parse(InputStream)","1","opennlp.tools.formats.nkjp.NKJPSegmentationDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","184","opennlp.tools.util.model.BaseModel.loadModel(InputStream)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","185","opennlp.tools.postag.POSSampleEventStream.generateEvents(String[],String[],Object[],POSContextGenerator)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","186","opennlp.tools.parser.Parse.clone()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","187","opennlp.tools.parser.Parse.add(Parse,HeadRules)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","188","opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.valueAt(double[])","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","189","opennlp.tools.parser.lang.en.HeadRules.serialize(Writer)","1","opennlp.tools.parser.lang.en.HeadRulesTest.testSerialization [opennlp-tools]"
"opennlp","190","opennlp.tools.util.model.GenericModelSerializer.create(InputStream)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","191","opennlp.tools.formats.conllu.ConlluStream.read()","1","opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences [opennlp-tools]"
"opennlp","192","opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(String[])","1","opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizer [opennlp-tools]"
"opennlp","193","opennlp.tools.namefind.NameFinderME.extractNameType(String)","1","opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools]"
"opennlp","194","opennlp.tools.parser.Parse.adjoin(Parse,HeadRules)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","195","opennlp.tools.parser.treeinsert.ParserEventStream.addParseEvents(List<Event>,Parse[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","196","opennlp.tools.tokenize.TokenSampleStream.read()","1","opennlp.tools.tokenize.TokSpanEventStreamTest.testEventOutcomes [opennlp-tools]"
"opennlp","197","opennlp.tools.sentdetect.DefaultSDContextGenerator.collectFeatures(String,String,String,String,Character)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools]"
"opennlp","198","opennlp.tools.util.model.ModelUtil.createDefaultTrainingParameters()","1","opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3 [opennlp-tools]"
"opennlp","199","opennlp.uima.dictionary.DictionaryResourceImpl.loadModel(InputStream)","1","opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder [opennlp-uima]"
"opennlp","200","opennlp.tools.util.eval.CrossValidationPartitioner.next()","1","opennlp.tools.util.eval.CrossValidationPartitionerTest.testEmptyDataSet [opennlp-tools]"
"opennlp","201","opennlp.tools.ml.model.ComparablePredicate.toString()","1","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","202","opennlp.tools.ml.maxent.io.GISModelWriter.persist()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","203","opennlp.tools.parser.treeinsert.BuildContextGenerator.getContext(Parse[],int)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","204","opennlp.tools.ml.maxent.GISTrainer.findParameters(int,double)","1","opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining [opennlp-tools]"
"opennlp","205","opennlp.tools.formats.Conll02NameSampleStream.read()","1","opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingDutchSample [opennlp-tools]"
"opennlp","206","opennlp.tools.postag.ConfigurablePOSContextGenerator.getContext(int,String[],String[],Object[])","1","opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools]"
"opennlp","207","opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(String[],String[],String[])","1","opennlp.tools.chunker.ChunkSampleTest.testNicePrint [opennlp-tools]"
"opennlp","208","opennlp.tools.util.featuregen.AggregatedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","209","opennlp.tools.cmdline.ArgumentParser.methodNameToParameter(String)","1","opennlp.tools.cmdline.CLITest.testHelpMessageOfTools [opennlp-tools]"
"opennlp","210","opennlp.tools.namefind.DictionaryNameFinder.find(String[])","1","opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","211","opennlp.tools.langdetect.LanguageDetectorEventStream.createEvents(LanguageSample)","1","opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools]"
"opennlp","212","opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.computeInParallel(double[],Class<?extendsComputeTask>)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","213","opennlp.tools.parser.Parse.updateHeads(HeadRules)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","214","opennlp.tools.formats.ad.ADNameSampleStream.getNER(String)","1","opennlp.tools.formats.ad.ADNameSampleStreamTest.testSmallSentence [opennlp-tools]"
"opennlp","215","opennlp.tools.sentdetect.SentenceSampleStream.read()","1","opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools]"
"opennlp","216","opennlp.tools.postag.POSTaggerFactory.createFeatureGenerators()","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools]"
"opennlp","217","opennlp.tools.namefind.NameFinderEventStream.generateEvents(String[],String[],NameContextGenerator)","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools]"
"opennlp","218","opennlp.tools.util.StringUtil.isWhitespace(int)","1","opennlp.tools.util.StringUtilTest.testNoBreakSpace [opennlp-tools]"
"opennlp","219","opennlp.tools.ngram.NGramModel.toDictionary(boolean)","1","opennlp.tools.ngram.NGramModelTest.testToDictionary1 [opennlp-tools]"
"opennlp","220","opennlp.tools.lemmatizer.DictionaryLemmatizer.init(InputStream)","1","opennlp.tools.lemmatizer.DictionaryLemmatizerMultiTest.testForNullPointerException [opennlp-tools]"
"opennlp","221","opennlp.tools.lemmatizer.DefaultLemmatizerContextGenerator.getContext(int,String[],String[],String[])","1","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools]"
"opennlp","222","opennlp.tools.postag.POSSample.getTags()","1","opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","223","opennlp.tools.util.Span.spansToStrings(Span[],CharSequence)","1","opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools]"
"opennlp","224","opennlp.tools.lemmatizer.LemmaSampleStream.read()","1","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools]"
