"Project","MethodIndex","Method","Count","Tests"
"gson","1","com.google.gson.internal.bind.DefaultDateTypeAdapter.deserializeToDate(JsonReader)","7","com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale [gson],com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale [gson]"
"gson","2","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(Field)","3","com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces [gson],com.google.gson.functional.SerializedNameTest.testFirstNameIsChosenForSerialization [gson],com.google.gson.functional.Java17RecordTest.testFieldNamingStrategy [gson]"
"gson","3","com.google.gson.internal.Excluder.isAnonymousOrNonStaticLocal(Class<?>)","2","com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded [gson],com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls [gson]"
"gson","4","com.google.gson.stream.JsonReader.peek()","2","com.google.gson.ObjectTypeAdapterTest.testDeserializeDeeplyNestedArrays [gson],com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization [gson]"
"gson","5","com.google.gson.internal.bind.util.ISO8601Utils.format(Date,boolean,TimeZone)","2","com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatWithMilliseconds [gson]"
"gson","6","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Gson,TypeToken<?>,Class<?>,boolean,boolean)","2","com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe [gson],com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects [gson]"
"gson","7","com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(Class<T1>,TypeAdapter<T1>)","2","com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive [gson],com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer [gson]"
"gson","8","com.google.gson.GsonBuilder.addTypeAdaptersForDate(String,int,int,List<TypeAdapterFactory>)","2","com.google.gson.functional.ToNumberPolicyFunctionalTest.testAsDoubles [gson],com.google.gson.MixedStreamTest.testWriteLenient [gson]"
"gson","9","com.google.gson.internal.bind.util.ISO8601Utils.parse(String,ParsePosition)","1","com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseInvalidDay [gson]"
"gson","10","com.google.gson.Gson.getAdapter(TypeToken<T>)","1","com.google.gson.functional.JsonTreeTest.testJsonTreeNull [gson]"
"gson","11","com.google.gson.Gson.toJson(Object,Type,Appendable)","1","com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testPrimitiveFieldAnnotationTakesPrecedenceOverDefault [gson]"
"gson","12","com.google.gson.internal.bind.ObjectTypeAdapter.read(JsonReader)","1","com.google.gson.ObjectTypeAdapterTest.testDeserializeDeeplyNestedObjects [gson]"
"gson","13","com.google.gson.internal.bind.NumberTypeAdapter.newFactory(ToNumberStrategy)","1","com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization [gson]"
"gson","14","com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(String)","1","com.google.gson.FieldNamingPolicyTest.testUpperCaseFirstLetter [gson]"
"gson","15","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(JsonWriter,T)","1","com.google.gson.functional.ReadersWritersTest.testToJsonAppendable [gson]"
"gson","16","com.google.gson.stream.JsonReader.endObject()","1","com.google.gson.functional.FormattingStyleTest.testVariousCombinationsParse [gson]"
"gson","17","com.google.gson.reflect.TypeToken.getTypeTokenTypeArgument()","1","com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders [gson]"
"gson","18","com.google.gson.stream.JsonReader.beginArray()","1","com.google.gson.JsonParserTest.testParseDeeplyNestedArrays [gson]"
"gson","19","com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(Class<?superT>,FilterResult)","1","com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization [gson]"
"gson","20","com.google.gson.internal.bind.TypeAdapters.newFactory(Class<TT>,Class<TT>,TypeAdapter<?superTT>)","1","com.google.gson.functional.JsonTreeTest.testJsonTreeToString [gson]"
"gson","21","com.google.gson.Gson.toJson(Object,Type,JsonWriter)","1","com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization [gson]"
"gson","22","com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.create(Gson,TypeToken<T>)","1","com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization [gson]"
"gson","23","com.google.gson.stream.JsonReader.nextUnquotedValue()","1","com.google.gson.stream.JsonReaderTest.testVeryLongUnquotedString [gson]"
"gson","24","com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)","1","com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testNullSafeObjectFromJson [gson]"
"gson","25","com.google.gson.internal.bind.TreeTypeAdapter.write(JsonWriter,T)","1","com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming [gson]"
"gson","26","com.google.gson.internal.Excluder.excludeField(Field,boolean)","1","com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization [gson]"
"gson","27","com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(JsonReader)","1","com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization [gson]"
"gson","28","com.google.gson.Gson.atomicLongAdapter(TypeAdapter<Number>)","1","com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter [gson]"
