"Project","MethodIndex","Method","Count","Tests"
"gson","1","com.google.gson.internal.bind.DefaultDateTypeAdapter.deserializeToDate(JsonReader)","7","com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale [gson],com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone [gson],com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale [gson]"
"gson","2","com.google.gson.Gson.atomicLongAdapter(TypeAdapter<Number>)","3","com.google.gson.functional.MapTest.testMapDeserializationEmpty [gson],com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType [gson],com.google.gson.functional.MapTest.testMapSerializationEmpty [gson]"
"gson","3","com.google.gson.internal.Excluder.isAnonymousOrNonStaticLocal(Class<?>)","2","com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces [gson],com.google.gson.internal.bind.RecursiveTypesResolveTest.testRecursiveResolveSimple [gson]"
"gson","4","com.google.gson.internal.bind.util.ISO8601Utils.parse(String,ParsePosition)","2","com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseWithTimezone [gson],com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseWithDefaultTimezone [gson]"
"gson","5","com.google.gson.GsonBuilder.registerTypeAdapter(Type,Object)","2","com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter [gson],com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter [gson]"
"gson","6","com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(Gson,TypeToken<T>)","1","com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters [gson]"
"gson","7","com.google.gson.stream.JsonReader.skipQuotedValue(char)","1","com.google.gson.stream.JsonReaderTest.testSkipTopLevelQuotedString [gson]"
"gson","8","com.google.gson.internal.bind.util.ISO8601Utils.format(Date,boolean,TimeZone)","1","com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatWithTimezone [gson]"
"gson","9","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Gson,TypeToken<?>,Class<?>,boolean,boolean)","1","com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCaseUnderscorePolicyDeserialiation [gson]"
"gson","10","com.google.gson.reflect.TypeToken.getTypeTokenTypeArgument()","1","com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect [gson]"
"gson","11","com.google.gson.Gson.newJsonReader(Reader)","1","com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization [gson]"
"gson","12","com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(Class<T1>,TypeAdapter<T1>)","1","com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization [gson]"
"gson","13","com.google.gson.internal.bind.TypeAdapters.newFactory(Class<TT>,Class<TT>,TypeAdapter<?superTT>)","1","com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization [gson]"
"gson","14","com.google.gson.stream.JsonReader.hasNext()","1","com.google.gson.ObjectTypeAdapterTest.testDeserializeDeeplyNestedObjects [gson]"
"gson","15","com.google.gson.internal.Streams.write(JsonElement,JsonWriter)","1","com.google.gson.internal.bind.JsonTreeWriterTest.testObject [gson]"
"gson","16","com.google.gson.internal.UnsafeAllocator.create()","1","com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault [gson]"
"gson","17","com.google.gson.internal.bind.DefaultDateTypeAdapter.write(JsonWriter,Date)","1","com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testDatePattern [gson]"
"gson","18","com.google.gson.stream.JsonWriter.open(int,char)","1","com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation [gson]"
"gson","19","com.google.gson.stream.JsonReader.peekNumber()","1","com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization [gson]"
"gson","20","com.google.gson.internal.Primitives.wrap(Class<T>)","1","com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization [gson]"
"gson","21","com.google.gson.Gson.fromJson(String,Class<T>)","1","com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization [gson]"
"gson","22","com.google.gson.JsonObject.add(String,JsonElement)","1","com.google.gson.JsonParserTest.testParseDeeplyNestedObjects [gson]"
"gson","23","com.google.gson.internal.bind.TreeTypeAdapter.read(JsonReader)","1","com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming [gson]"
"gson","24","com.google.gson.stream.JsonReader.doPeek()","1","com.google.gson.ObjectTypeAdapterTest.testDeserializeDeeplyNestedArrays [gson]"
"gson","25","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(Field)","1","com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields [gson]"
"gson","26","com.google.gson.internal.bind.TreeTypeAdapter.write(JsonWriter,T)","1","com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming [gson]"
