"Project","Rank","Method","Count","Tests"
"Project","MethodIndex","Method","Count","Tests"
"spark","1","spark.embeddedserver.jetty.EmbeddedJettyFactory.create(Routes,StaticFilesConfiguration,boolean)","17","spark.staticfiles.StaticFilesTest.testDirectoryTraversalProtectionLocal [],spark.MultipleServicesTest.testGetUniqueForSecondWithFirst [],spark.RedirectTest.testRedirectAnyPut [],spark.ServicePortIntegrationTest.testGetPort_withRandomPort [],spark.GenericSecureIntegrationTest.testEchoParamWithMaj [],spark.RedirectTest.testRedirectPut [],spark.GenericSecureIntegrationTest.testEchoParam2 [],spark.RedirectTest.testRedirectAnyGetWithSpecificCode [],spark.MultipleServicesTest.testGetHello [],spark.staticfiles.StaticFilesTest.testCustomMimeType [],spark.MultipleServicesTest.testStaticFileCssStyleCssWithSecond [],spark.CookiesIntegrationTest.testRemoveCookieWithPath [],spark.MultipleServicesTest.testGetRedirectedHi [],spark.GenericIntegrationTest.paths_should_be_nestable [],spark.GenericIntegrationTest.testEchoParam3 [],spark.GzipTest.checkGzipCompression [],spark.MultipleServicesTest.testStaticFileCssStyleCssWithFirst []"
"spark","2","spark.embeddedserver.jetty.JettyServer.create(int,int,int)","8","spark.staticfiles.StaticFilesTest.testDirectoryTraversalProtectionLocal [],spark.embeddedserver.jetty.JettyServerTest.testCreateServer_whenNonDefaultMaxThreadOnly_thenUseDefaultMinThreadAndTimeout [],spark.GenericSecureIntegrationTest.testNotFound [],spark.GenericSecureIntegrationTest.testEchoParamWithMaj [],spark.GenericIntegrationTest.testEchoParamWithUpperCaseInValue [],spark.MultipleServicesTest.testStaticFileCssStyleCssWithFirst [],spark.GenericSecureIntegrationTest.testEchoParam2 [],spark.GenericIntegrationTest.testRuntimeExceptionForAllRoutesFinally []"
"spark","3","spark.embeddedserver.jetty.SocketConnectorFactory.createHttpConnectionFactory()","6","spark.MultipleServicesTest.testStaticFileCssStyleCssWithSecond [],spark.CookiesIntegrationTest.testRemoveCookieWithPath [],spark.MultipleServicesTest.testGetRedirectedHi [],spark.GenericIntegrationTest.testEchoParam3 [],spark.GenericIntegrationTest.testGetBinaryHi [],spark.MultipleServicesTest.testStaticFileCssStyleCssWithFirst []"
"spark","4","spark.embeddedserver.jetty.SocketConnectorFactory.createSocketConnector(Server,String,int)","5","spark.RedirectTest.testRedirectAnyGetWithSpecificCode [],spark.GenericIntegrationTest.testTwoRoutesWithDifferentCaseButSameName [],spark.RedirectTest.testRedirectPut [],spark.customerrorpages.CustomErrorPagesTest.testCustomInternalFailingRoute [],spark.BooksIntegrationTest.canDeleteBook []"
"spark","5","spark.embeddedserver.jetty.websocket.WebSocketServletContextHandlerFactory.create(Map<String,WebSocketHandlerWrapper>,Optional<Integer>)","3","spark.GenericIntegrationTest.testHiHead [],spark.GenericIntegrationTest.paths_should_be_nestable [],spark.GenericIntegrationTest.testPatch []"
"spark","6","spark.Service.initializeRouteMatcher()","2","spark.GenericSecureIntegrationTest.testNotFound [],spark.GenericIntegrationTest.testRuntimeExceptionForDone []"
"spark","7","spark.Routable.get(String,Route)","2","spark.GenericSecureIntegrationTest.testGetHi [],spark.RedirectTest.testRedirectAnyDeleteWithSpecificCode []"
"spark","8","spark.Service.stop()","2","spark.GenericIntegrationTest.testInheritanceExceptionMapper [],spark.GenericSecureIntegrationTest.testEchoParam1 []"
"spark","9","spark.route.Routes.add(HttpMethod,String,String,Object)","2","spark.MultipleServicesTest.testGetUniqueForSecondWithFirst [],spark.MultipleServicesTest.testGetHello []"
"spark","10","spark.http.matching.MatcherFilter.doFilter(ServletRequest,ServletResponse,FilterChain)","2","spark.StaticFilesMemberTest.testStaticFileHeaders [],spark.GenericSecureIntegrationTest.testXForwardedFor []"
"spark","11","spark.staticfiles.StaticFilesConfiguration.configure(String)","1","spark.MultipleServicesTest.testStaticFileCssStyleCssWithSecond []"
"spark","12","spark.resource.AbstractFileResolvingResource.getFile()","1","spark.staticfiles.StaticFilesTest.testStaticFilePageHtml []"
"spark","13","spark.embeddedserver.EmbeddedServers.initialize()","1","spark.CookiesIntegrationTest.testRemoveCookieWithPath []"
"spark","14","spark.embeddedserver.jetty.SocketConnectorFactory.createSecureSocketConnector(Server,String,int,SslStores)","1","spark.GenericSecureIntegrationTest.testGetHi []"
"spark","15","spark.route.Routes.getAcceptedMimeTypes(List<RouteEntry>)","1","spark.GenericIntegrationTest.testPost []"
"spark","16","spark.staticfiles.StaticFilesFolder.localConfiguredTo(String)","1","spark.StaticFilesMemberTest.testStaticFilePageHtml []"
"spark","17","spark.utils.StringUtils.collectionToDelimitedString(Collection<?>,String,String,String)","1","spark.GenericIntegrationTest.testEchoParam3 []"
"spark","18","spark.embeddedserver.jetty.JettyHandler.doHandle(String,Request,HttpServletRequest,HttpServletResponse)","1","spark.GenericIntegrationTest.testExternalStaticFile []"
"spark","19","spark.resource.ClassPathResourceHandler.getResource(String)","1","spark.GenericIntegrationTest.testGetHiAfterFilter []"
"spark","20","spark.route.Routes.findMultiple(HttpMethod,String,String)","1","spark.GenericIntegrationTest.testUnauthorized []"
"spark","21","spark.embeddedserver.jetty.EmbeddedJettyServer.ignite(String,int,SslStores,int,int,int)","1","spark.GenericIntegrationTest.testEchoParamWithMaj []"
"spark","22","spark.route.RouteEntry.matches(HttpMethod,String)","1","spark.RedirectTest.testRedirectAnyPost []"
"spark","23","spark.http.matching.AfterAfterFilters.execute(RouteContext)","1","spark.BooksIntegrationTest.canGetBook []"
"spark","24","spark.Service.getPaths()","1","spark.servlet.ServletTest.testEchoParam2 []"
"spark","25","spark.utils.ResourceUtils.getFile(URL,String)","1","spark.GenericIntegrationTest.testNotFoundExceptionMapper []"
"spark","26","spark.embeddedserver.jetty.EmbeddedJettyServer.extinguish()","1","spark.GenericIntegrationTest.testPathParamsWithPlusSign []"
"spark","27","spark.Service.webSocket(String,Class<?>)","1","spark.GenericIntegrationTest.paths_should_be_nestable []"
"spark","28","spark.Service.addRoute(HttpMethod,RouteImpl)","1","spark.MultipleServicesTest.testStaticFileCssStyleCssWithFirst []"
"spark","29","spark.Spark.getInstance()","1","spark.BooksIntegrationTest.canGetBook []"
"spark","30","spark.Service.addFilter(HttpMethod,FilterImpl)","1","spark.GenericIntegrationTest.testTwoRoutesWithDifferentCaseButSameName []"
