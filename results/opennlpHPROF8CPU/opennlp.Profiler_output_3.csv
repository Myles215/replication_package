"Project","MethodIndex","Method","Count","Tests"
"opennlp","1","opennlp.tools.ml.perceptron.PerceptronTrainer.findParameters(int,boolean)","172","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","2","opennlp.tools.util.Span.spansToStrings(Span[],CharSequence)","89","opennlp.tools.namefind.NameSampleTypeFilterTest.testMultiFilter [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFail [opennlp-tools]"
"opennlp","3","opennlp.tools.ml.model.AbstractDataIndexer.update(String[],Map<String,Integer>)","73","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","4","opennlp.tools.ml.model.Event.toString()","69","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","5","opennlp.tools.ml.model.TwoPassDataIndexer.computeEventCounts(ObjectStream<Event>,DataOutputStream,Map<String,Integer>,int)","65","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3 [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","6","opennlp.tools.ngram.NGramCharModel.add(CharSequence,int,int)","44","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","7","opennlp.tools.ml.ArrayMath.sumFeatures(Context[],float[],double[])","29","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","8","opennlp.tools.ml.maxent.GISTrainer.nextIteration(double,CompletionService<ModelExpectationComputeTask>)","27","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testInsufficientData [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","9","opennlp.tools.ml.maxent.GISTrainer.trainModel(int,DataIndexer,Prior,int)","25","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","10","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computeDirection(double[])","25","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","11","opennlp.tools.ml.model.AbstractDataIndexer.index(ObjectStream<Event>,Map<String,Integer>)","22","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1 [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndex [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.insufficientTestData [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","12","opennlp.tools.ml.perceptron.PerceptronModel.eval(int[],float[],double[],EvalParameters,boolean)","21","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","13","opennlp.tools.langdetect.DefaultLanguageDetectorContextGenerator.getContext(CharSequence)","21","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","14","opennlp.tools.tokenize.WhitespaceTokenizer.tokenizePos(String)","20","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.RegexNameFinderFactoryTest.testLatLong [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.postag.POSEvaluatorTest.testNegative [opennlp-tools],opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools],opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFilter [opennlp-tools]"
"opennlp","15","opennlp.tools.ngram.NGramCharModel.setCount(String,int)","19","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","16","opennlp.tools.ml.model.AbstractModel.init(String[],Context[],String[])","17","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","17","opennlp.tools.ml.model.AbstractDataIndexer.sortAndMerge(List<ComparableEvent>,boolean)","16","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4 [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","18","opennlp.tools.util.StringUtil.toLowerCase(CharSequence)","16","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testIterator [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.util.StringUtilTest.testLowercaseBeyondBMP [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","19","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters()","14","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","20","opennlp.tools.ngram.NGramModel.add(StringList,int,int)","11","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testBuildNGramDictionary [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","21","opennlp.tools.ml.maxent.GISModel.eval(Context[],float[],double[],EvalParameters)","11","opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1 [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","22","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(Function)","8","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","23","opennlp.tools.ml.perceptron.PerceptronTrainer.trainingStats(EvalParameters)","7","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals [opennlp-tools]"
"opennlp","24","opennlp.tools.tokenize.SimpleTokenizer.tokenizePos(String)","7","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.tokenize.SimpleTokenizerTest.testWordWithOtherTokenization [opennlp-tools]"
"opennlp","25","opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int,DataIndexer)","6","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","26","opennlp.tools.tokenize.TokenSample.parse(String,String)","6","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300 [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","27","opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int,Object[],String[])","6","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","28","opennlp.tools.ml.maxent.GISModel.eval(int[],float[],double[],EvalParameters)","6","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","29","opennlp.tools.ml.model.AbstractDataIndexer.toIndexedStringArray(Map<String,Integer>)","6","opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","30","opennlp.tools.ml.naivebayes.NaiveBayesModel.initOutcomeTotals(String[],Context[])","6","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","31","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainingStats(EvalParameters)","5","opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3 [opennlp-tools]"
"opennlp","32","opennlp.tools.ml.model.HashSumEventStream.calculateHashSum()","5","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","33","opennlp.tools.ml.model.AbstractModelReader.getParameters(int[][])","5","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","34","opennlp.tools.ml.ArrayMath.innerProduct(double[],double[])","5","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","35","opennlp.tools.ml.maxent.quasinewton.LineSearch.doConstrainedLineSearch(Function,double[],LineSearchResult,double,double)","5","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","36","opennlp.tools.ml.model.DataIndexerFactory.getDataIndexer(TrainingParameters,Map<String,String>)","4","opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","37","opennlp.tools.util.StringList.toString()","4","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","38","opennlp.tools.parser.ChunkContextGenerator.getContext(int,String[],String[],String[])","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","39","opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(List<String>,String[],int,String[])","4","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testForCorrectFeatures [opennlp-tools]"
"opennlp","40","opennlp.tools.ml.model.TwoPassDataIndexer.index(ObjectStream<Event>)","4","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools]"
"opennlp","41","opennlp.tools.postag.POSSampleEventStream.generateEvents(String[],String[],Object[],POSContextGenerator)","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","42","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(int[],float[],double[],EvalParameters,boolean)","4","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage [opennlp-tools]"
"opennlp","43","opennlp.tools.util.AbstractObjectStream.read()","4","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","44","opennlp.tools.chunker.DefaultChunkerContextGenerator.getContext(int,String[],String[],String[])","4","opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","45","opennlp.tools.util.featuregen.PrefixFeatureGenerator.getPrefixes(String)","4","opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","46","opennlp.tools.ml.model.HashSumEventStream.read()","4","opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","47","opennlp.tools.ml.model.OnePassDataIndexer.computeEventCounts(ObjectStream<Event>,Map<String,Integer>,int)","4","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","48","opennlp.tools.parser.Parse.parseParse(String,GapLabeler)","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.ParseTest.testEquals [opennlp-tools],opennlp.tools.parser.ParseTest.testShow [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","49","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computePseudoGrad(double[],double[],double[])","4","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","50","opennlp.tools.tokenize.TokenizerME.train(ObjectStream<TokenSample>,TokenizerFactory,TrainingParameters)","3","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","51","opennlp.tools.parser.AbstractParserEventStream.getInitialChunks(Parse)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","52","opennlp.tools.namefind.NameSample.getSentence()","3","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","53","opennlp.tools.ml.maxent.GISModel.eval(String[],float[],double[])","3","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","54","opennlp.tools.ngram.NGramCharModel.add(String)","3","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools]"
"opennlp","55","opennlp.tools.tokenize.TokSpanEventStream.createEvents(TokenSample)","3","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools]"
"opennlp","56","opennlp.tools.util.featuregen.TokenClassFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","57","opennlp.tools.ml.maxent.GISTrainer.display(String)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","58","opennlp.tools.parser.ParseSampleStream.read()","3","opennlp.tools.parser.ParseSampleStreamTest.testReadTestStream [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample [opennlp-tools]"
"opennlp","59","opennlp.tools.ml.BeamSearch.bestSequences(int,T[],Object[],double,BeamSearchContextGenerator<T>,SequenceValidator<T>)","3","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","60","opennlp.tools.util.model.BaseModel.ArtifactSerializer>createArtifactSerializers()","3","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools]"
"opennlp","61","opennlp.tools.namefind.NameFinderEventStream.generateEvents(String[],String[],NameContextGenerator)","3","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","62","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(Context[],float[],double[],EvalParameters,boolean)","3","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","63","opennlp.tools.ml.model.ComparableEvent.compareTo(ComparableEvent)","2","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","64","opennlp.tools.ml.model.AbstractModelReader.getOutcomePatterns()","2","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","65","opennlp.tools.sentdetect.SDEventStream.createEvents(SentenceSample)","2","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","66","opennlp.tools.util.StringUtil.isWhitespace(char)","2","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","67","opennlp.tools.parser.AbstractBottomUpParser.buildDictionary(ObjectStream<Parse>,HeadRules,TrainingParameters)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","68","opennlp.tools.util.normalizer.AggregateCharSequenceNormalizer.normalize(CharSequence)","2","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools],opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","69","opennlp.tools.postag.POSTaggerME.train(String,ObjectStream<POSSample>,TrainingParameters,POSTaggerFactory)","2","opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration [opennlp-tools],opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","70","opennlp.tools.util.model.BaseModel.loadModel(InputStream)","2","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","71","opennlp.tools.util.AbstractEventStream.read()","2","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","72","opennlp.tools.parser.AbstractContextGenerator.consbo(Parse,int)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","73","opennlp.tools.chunker.ChunkerME.train(String,ObjectStream<ChunkSample>,TrainingParameters,ChunkerFactory)","2","opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","74","opennlp.tools.parser.Parse.getTagNodes()","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","75","opennlp.tools.postag.POSSample.getSentence()","2","opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","76","opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","77","opennlp.tools.ml.ArrayMath.argmax(double[])","2","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools]"
"opennlp","78","opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(String[])","2","opennlp.tools.namefind.BilouCodecTest.testCompatibilityBadTag [opennlp-tools],opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLastOther [opennlp-tools]"
"opennlp","79","opennlp.tools.util.featuregen.GeneratorFactory.buildGenerator(Element,FeatureGeneratorResourceProvider)","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","80","opennlp.tools.namefind.NameFinderME.train(String,String,ObjectStream<NameSample>,TrainingParameters,TokenNameFinderFactory)","2","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools]"
"opennlp","81","opennlp.tools.util.featuregen.StringPattern.recognize(String)","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools]"
"opennlp","82","opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.computeInParallel(double[],Class<?extendsComputeTask>)","2","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","83","opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(String[],Map<String,Object>)","2","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","84","opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(String)","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testBegin [opennlp-tools]"
"opennlp","85","opennlp.tools.namefind.NameSample.parse(String,String,boolean)","2","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","86","opennlp.tools.ml.perceptron.PerceptronModelWriter.sortValues()","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization [opennlp-tools]"
"opennlp","87","opennlp.tools.parser.AbstractContextGenerator.cons3(List<String>,Cons,Cons,Cons,Collection<Parse>,Collection<Parse>,boolean,boolean,boolean)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","88","opennlp.tools.namefind.BioCodec.encode(Span[],int)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","89","opennlp.tools.util.model.PropertiesSerializer.create(InputStream)","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","90","opennlp.tools.formats.ad.ADNameSampleStream.processLeaf(Leaf,List<String>,List<Span>)","1","opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools]"
"opennlp","91","opennlp.tools.ml.model.AbstractDataIndexer.init(TrainingParameters,Map<String,String>)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","92","opennlp.tools.namefind.BioCodec.areOutcomesCompatible(String[])","1","opennlp.tools.namefind.BioCodecTest.testCompatibilityContinueOther [opennlp-tools]"
"opennlp","93","opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(Element,FeatureGeneratorResourceProvider)","1","opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGeneratorChild [opennlp-tools]"
"opennlp","94","opennlp.tools.langdetect.LanguageDetectorME.updateCounts(String[],Map<String,MutableInt>)","1","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","95","opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int,String[],String[],String)","1","opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByContinue [opennlp-tools]"
"opennlp","96","opennlp.tools.ml.ArrayMath.l2norm(double[])","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools]"
"opennlp","97","opennlp.tools.namefind.NameSample.parse(String,boolean)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","98","opennlp.tools.util.BaseToolFactory.create(String,ArtifactProvider)","1","opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithHierarchy [opennlp-tools]"
"opennlp","99","opennlp.tools.parser.PosSampleStream.read()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","100","opennlp.tools.cmdline.EvaluationErrorPrinter.printSamples(S,S)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","101","opennlp.tools.tokenize.DefaultTokenContextGenerator.createContext(String,int)","1","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","102","opennlp.tools.ml.perceptron.PerceptronModel.eval(Context[],float[],double[],EvalParameters,boolean)","1","opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","103","opennlp.tools.parser.ChunkSampleStream.getInitialChunks(Parse,List<Parse>)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","104","opennlp.tools.ngram.NGramModel.getCount(StringList)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","105","opennlp.tools.ml.model.MutableContext.updateParameter(int,double)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","106","opennlp.tools.util.featuregen.BigramNameFeatureGeneratorFactory.register(Map<String,GeneratorFactory.XmlFeatureGeneratorFactory>)","1","opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator [opennlp-tools]"
"opennlp","107","opennlp.tools.formats.muc.SgmlParser.parse(Reader,ContentHandler)","1","opennlp.tools.formats.muc.SgmlParserTest.testParse1 [opennlp-tools]"
"opennlp","108","opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(Function,double[],LineSearchResult,double)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","109","opennlp.tools.ml.model.Context.getOutcomes()","1","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","110","opennlp.tools.parser.chunking.BuildContextGenerator.getContext(Parse[],int)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","111","opennlp.tools.parser.AbstractParserEventStream.createEvents(Parse)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","112","opennlp.tools.util.featuregen.TokenFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools]"
"opennlp","113","opennlp.tools.util.model.BaseModel.serialize(OutputStream)","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","114","opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(String)","1","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","115","opennlp.tools.ml.model.Event.getOutcome()","1","opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages [opennlp-tools]"
"opennlp","116","opennlp.tools.tokenize.DefaultTokenContextGenerator.addCharPreds(String,char,List<String>)","1","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools]"
"opennlp","117","opennlp.tools.util.eval.Evaluator.evaluateSample(T)","1","opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample [opennlp-tools]"
"opennlp","118","opennlp.tools.chunker.ChunkSampleStream.read()","1","opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","119","opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.sortValues()","1","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools]"
"opennlp","120","opennlp.tools.ml.model.RealValueFileEventStream.read()","1","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientSanity [opennlp-tools]"
"opennlp","121","opennlp.tools.parser.Parse.add(Parse,HeadRules)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","122","opennlp.tools.util.model.GenericModelSerializer.create(InputStream)","1","opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory [opennlp-tools]"
"opennlp","123","opennlp.tools.parser.treeinsert.AttachContextGenerator.getContext(Parse[],int,List<Parse>,int)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","124","opennlp.tools.parser.Parse.getType(String)","1","opennlp.tools.parser.ParseTest.testToHashCode [opennlp-tools]"
"opennlp","125","opennlp.tools.util.Span.getEnd()","1","opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes [opennlp-tools]"
"opennlp","126","opennlp.tools.ml.maxent.io.GISModelWriter.compressOutcomes(ComparablePredicate[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","127","opennlp.tools.util.StringList.size()","1","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","128","opennlp.tools.ml.model.AbstractDataIndexer.display(String)","1","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02 [opennlp-tools]"
"opennlp","129","opennlp.morfologik.builder.MorfologikDictionayBuilder.build(Path,boolean,boolean,boolean,boolean,boolean)","1","opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testNoLemma [opennlp-morfologik-addon]"
"opennlp","130","opennlp.tools.util.model.BaseModel.validateArtifactMap()","1","opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory [opennlp-tools]"
"opennlp","131","opennlp.tools.ml.maxent.io.GISModelWriter.sortValues()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","132","opennlp.tools.parser.treeinsert.ParserEventStream.addParseEvents(List<Event>,Parse[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","133","opennlp.tools.formats.frenchtreebank.ConstitDocumentHandler.endElement(String,String,String)","1","opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect [opennlp-tools]"
"opennlp","134","opennlp.tools.parser.chunking.CheckContextGenerator.getContext(Parse[],String,int,int)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","135","opennlp.tools.ml.naivebayes.BinaryNaiveBayesModelWriter.writeUTF(String)","1","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools]"
"opennlp","136","opennlp.tools.namefind.TokenNameFinderCrossValidator.evaluate(ObjectStream<NameSample>,int)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","137","opennlp.uima.dictionary.DictionaryResourceImpl.loadModel(InputStream)","1","opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder [opennlp-uima]"
"opennlp","138","opennlp.tools.ml.model.EvalParameters.getParams()","1","opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools]"
"opennlp","139","opennlp.tools.ml.maxent.io.GISModelWriter.persist()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","140","opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel()","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","141","opennlp.tools.util.normalizer.NumberCharSequenceNormalizer.normalize(CharSequence)","1","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools]"
"opennlp","142","opennlp.tools.dictionary.Dictionary.asStringSet()","1","opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testIterator [opennlp-tools]"
"opennlp","143","opennlp.tools.parser.treeinsert.BuildContextGenerator.getContext(Parse[],int)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","144","opennlp.tools.ml.maxent.GISTrainer.findParameters(int,double)","1","opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools]"
"opennlp","145","opennlp.tools.parser.chunking.ParserEventStream.reduceChunks(Parse[],int,Parse)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","146","opennlp.tools.util.featuregen.DefinitionFeatureGeneratorFactory.register(Map<String,GeneratorFactory.XmlFeatureGeneratorFactory>)","1","opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWihtSimpleDescriptor [opennlp-tools]"
"opennlp","147","opennlp.tools.parser.chunking.ParserEventStream.addParseEvents(List<Event>,Parse[])","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","148","opennlp.tools.chunker.ChunkerEventStream.createEvents(ChunkSample)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","149","opennlp.tools.namefind.NameFinderME.find(String[],String[][])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","150","opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(String[],String[],String[])","1","opennlp.tools.chunker.ChunkSampleTest.testNicePrint [opennlp-tools]"
"opennlp","151","opennlp.tools.formats.convert.NameToTokenSampleStream.read()","1","opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSimpleCount [opennlp-tools]"
"opennlp","152","opennlp.tools.util.MarkableFileInputStreamFactory.createInputStream()","1","opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools]"
"opennlp","153","opennlp.tools.parser.Parse.parseParse(String)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","154","opennlp.tools.util.PlainTextByLineStream.reset()","1","opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing [opennlp-tools]"
"opennlp","155","opennlp.tools.util.featuregen.AggregatedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.cmdline.TokenNameFinderToolTest.run [opennlp-tools]"
"opennlp","156","opennlp.tools.ml.model.AbstractModelReader.readDouble()","1","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","157","opennlp.tools.util.model.POSModelSerializer.create(InputStream)","1","opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel [opennlp-tools]"
"opennlp","158","opennlp.tools.ngram.NGramModel.iterator()","1","opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel [opennlp-tools]"
"opennlp","159","opennlp.tools.formats.conllu.ConlluTokenSampleStreamFactory.registerFactory()","1","opennlp.tools.cmdline.CLITest.testToolParameterMessage [opennlp-tools]"
"opennlp","160","opennlp.tools.ngram.NGramGenerator.generate(List<String>,int,String)","1","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools]"
"opennlp","161","opennlp.tools.namefind.TokenNameFinderFactory.createFeatureGenerators()","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","162","opennlp.tools.formats.Conll02NameSampleStream.extract(int,int,String)","1","opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample [opennlp-tools]"
"opennlp","163","opennlp.tools.ml.model.UniformPrior.logPrior(double[],int[])","1","opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools]"
"opennlp","164","opennlp.tools.ml.model.AbstractModelReader.readUTF()","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","165","opennlp.tools.util.StringUtil.levenshteinDistance(String,String)","1","opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","166","opennlp.tools.ml.AbstractEventTrainer.train(ObjectStream<Event>)","1","opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools]"
"opennlp","167","opennlp.tools.util.ObjectStreamUtils.createObjectStream(T...)","1","opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesWithType [opennlp-tools]"
"opennlp","168","opennlp.tools.namefind.DefaultNameContextGenerator.getContext(int,String[],String[],Object[])","1","opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence [opennlp-tools]"
"opennlp","169","opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(Class<T>,String)","1","opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride [opennlp-tools]"
"opennlp","170","opennlp.tools.tokenize.TokenSample.getTokenSpans()","1","opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools]"
"opennlp","171","opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist()","1","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","172","opennlp.tools.parser.treeinsert.CheckContextGenerator.getContext(Parse,Parse[],int,boolean)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","173","opennlp.tools.postag.WordTagSampleStream.read()","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","174","opennlp.tools.sentdetect.SentenceModel.validateArtifactMap()","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","175","opennlp.tools.util.model.ModelUtil.writeModel(MaxentModel,OutputStream)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools]"
"opennlp","176","opennlp.tools.ml.model.UniformPrior.setLabels(String[],String[])","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","177","opennlp.tools.util.featuregen.BigramNameFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","178","opennlp.tools.util.model.BaseModel.finishLoadingArtifacts(InputStream)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","179","opennlp.tools.namefind.BioCodec.decode(List<String>)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","180","opennlp.tools.langdetect.LanguageDetectorME.predict(Map<String,MutableInt>)","1","opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate [opennlp-tools]"
"opennlp","181","opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(String)","1","opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading [opennlp-tools]"
"opennlp","182","opennlp.tools.parser.AbstractContextGenerator.cons(Parse,int)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","183","opennlp.tools.util.featuregen.SuffixFeatureGenerator.getSuffixes(String)","1","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","184","opennlp.tools.lemmatizer.LemmatizerME.train(String,ObjectStream<LemmaSample>,TrainingParameters,LemmatizerFactory)","1","opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","185","opennlp.tools.langdetect.LanguageDetectorME.train(ObjectStream<LanguageSample>,TrainingParameters,LanguageDetectorFactory)","1","opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages [opennlp-tools]"
"opennlp","186","opennlp.tools.ngram.NGramModel.toDictionary(boolean)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","187","opennlp.tools.parser.Parse.getChildren()","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","188","opennlp.tools.ml.model.UniformPrior.logPrior(double[],int[],float[])","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","189","opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.computeOutcomePatterns(ComparablePredicate[])","1","opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory [opennlp-tools]"
"opennlp","190","opennlp.tools.ml.maxent.GISModel.eval(String[])","1","opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold [opennlp-tools]"
"opennlp","191","opennlp.tools.lemmatizer.DefaultLemmatizerContextGenerator.getContext(int,String[],String[],String[])","1","opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData [opennlp-tools]"
"opennlp","192","opennlp.tools.ml.maxent.GISModel.eval(int[],double[],EvalParameters)","1","opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools]"
"opennlp","193","opennlp.tools.formats.EvalitaNameSampleStream.read()","1","opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample [opennlp-tools]"
"opennlp","194","opennlp.tools.ml.model.GenericModelReader.checkModelType()","1","opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","195","opennlp.tools.sentdetect.DefaultSDContextGenerator.escapeChar(Character)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","196","opennlp.tools.parser.AbstractContextGenerator.getFrontierNodes(List<Parse>,Parse[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","197","opennlp.tools.util.TrainingParameters.put(String,int)","1","opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","198","opennlp.tools.parser.AbstractContextGenerator.surround(Parse,int,String,Collection<Parse>,List<String>)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","199","opennlp.tools.sentdetect.SentenceDetectorME.train(String,ObjectStream<SentenceSample>,SentenceDetectorFactory,TrainingParameters)","1","opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools]"
"opennlp","200","opennlp.tools.parser.Parse.insert(Parse)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","201","opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.parse(InputStream)","1","opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc [opennlp-tools]"
"opennlp","202","opennlp.tools.langdetect.LanguageDetectorME.chunk(CharSequence,int,int)","1","opennlp.tools.langdetect.LanguageDetectorMETest.testProbingPredictLanguages [opennlp-tools]"
